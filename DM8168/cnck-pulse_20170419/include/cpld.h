#ifndef _CPLD_H
#define _CPLD_H

#include "datatype.h"

typedef struct
{
	  INT16U  Data:10;     //DA数据  0-----1023
	  INT16U  Addr1:1;    //通道1
	  INT16U  Addr2:1;    //通道2
	  INT16U  Addr3:1;    //通道3
	  INT16U  Addr4:1;    //通道4
	  INT16U  NC1:1;      // 无用
	  INT16U  NC2:1;      // 无用
}AD5135STR;

 typedef union
{ 
	INT16U OutData; 
	AD5135STR AD5315Str;
}AD5315DA; 

//DM8168 define as follows
//Input
struct  SERVO_OVER1_IN_BITS 		//驱动器报警输出1
{     // bits   description
	INT32U OVER_1:1;				//BIT0: OVER axis1	 		0:VALID OVER
	INT32U OVER_2:1;				//BIT0: OVER	axis2 		0:VALID OVER
	INT32U OVER_3:1;				//BIT0: OVER	axis3			0:VALID OVER
	INT32U OVER_4:1;				//BIT0: OVER	axis4 		0:VALID OVER
	INT32U OVER_5:1;				//BIT0: OVER	axis5 		0:VALID OVER
	INT32U OVER_15:1;				//BIT0: OVER	axis15 		0:VALID OVER
	INT32U OVER_16:1;				//BIT0: OVER	axis16 		0:VALID OVER
	INT32U OVER_17:1;				//BIT0: OVER	axis17 		0:VALID OVER
	INT32U OVER_18:1;				//BIT0: OVER	axis18 		0:VALID OVER
	INT32U OVER_11:1;				//BIT0: OVER	axis11 		0:VALID OVER
	INT32U OVER_12:1;				//BIT0: OVER	axis12 		0:VALID OVER
	INT32U OVER_13:1;				//BIT0: OVER	axis13 		0:VALID OVER
	INT32U OVER_14:1;				//BIT0: OVER	axis14 		0:VALID OVER
	INT32U OVER_23:1;				//BIT0: OVER	axis23 		0:VALID OVER
	INT32U INVALID:18;				//INVALID
};

union SERVO_OVER1_IN_REG {
   INT32U               all;
   struct SERVO_OVER1_IN_BITS  bit;
};


struct  SERVO_OVER2_IN_BITS 		//驱动器报警输出2
{     // bits   description
	INT32U OVER_6:1;				//BIT0: OVER axis6	 		0:VALID OVER
	INT32U OVER_7:1;				//BIT0: OVER	axis7 		0:VALID OVER
	INT32U OVER_8:1;				//BIT0: OVER	axis8			0:VALID OVER
	INT32U OVER_9:1;				//BIT0: OVER	axis9 		0:VALID OVER
	INT32U OVER_10:1;				//BIT0: OVER	axis10 		0:VALID OVER
	INT32U OVER_19:1;				//BIT0: OVER	axis19 		0:VALID OVER
	INT32U OVER_20:1;				//BIT0: OVER	axis20 		0:VALID OVER
	INT32U OVER_21:1;				//BIT0: OVER	axis21 		0:VALID OVER
	INT32U OVER_22:1;				//BIT0: OVER	axis22 		0:VALID OVER
	INT32U INVALID:23;				//INVALID
};

union SERVO_OVER2_IN_REG {
   INT32U               all;
   struct SERVO_OVER2_IN_BITS  bit;
};



struct  SERVO_ALARM1_IN_BITS 		//驱动器报警输出1
{     // bits   description
	INT32U ALM_1:1;				//BIT0: ALARM axis1	 		0:VALID ALM
	INT32U ALM_2:1;				//BIT0: ALARM	axis2 		0:VALID ALM
	INT32U ALM_3:1;				//BIT0: ALARM	axis3			0:VALID ALM
	INT32U ALM_4:1;				//BIT0: ALARM	axis4 		0:VALID ALM
	INT32U ALM_5:1;				//BIT0: ALARM	axis5 		0:VALID ALM
	INT32U ALM_15:1;				//BIT0: ALARM	axis15 		0:VALID ALM
	INT32U ALM_16:1;				//BIT0: ALARM	axis16 		0:VALID ALM
	INT32U ALM_17:1;				//BIT0: ALARM	axis17 		0:VALID ALM
	INT32U ALM_18:1;				//BIT0: ALARM	axis18 		0:VALID ALM
	INT32U ALM_11:1;				//BIT0: ALARM	axis11 		0:VALID ALM
	INT32U ALM_12:1;				//BIT0: ALARM	axis12 		0:VALID ALM
	INT32U ALM_13:1;				//BIT0: ALARM	axis13 		0:VALID ALM
	INT32U ALM_14:1;				//BIT0: ALARM	axis14 		0:VALID ALM
	INT32U ALM_23:1;				//BIT0: ALARM	axis23 		0:VALID ALM
	INT32U INVALID:18;				//INVALID
};

union SERVO_ALARM1_IN_REG {
   INT32U               all;
   struct SERVO_ALARM1_IN_BITS  bit;
};


struct  SERVO_ALARM2_IN_BITS 		//驱动器报警输出2
{     // bits   description
	INT32U ALM_6:1;				//BIT0: ALARM axis6	 		0:VALID ALM
	INT32U ALM_7:1;				//BIT0: ALARM	axis7 		0:VALID ALM
	INT32U ALM_8:1;				//BIT0: ALARM	axis8			0:VALID ALM
	INT32U ALM_9:1;				//BIT0: ALARM	axis9 		0:VALID ALM
	INT32U ALM_10:1;				//BIT0: ALARM	axis10 		0:VALID ALM
	INT32U ALM_19:1;				//BIT0: ALARM	axis19 		0:VALID ALM
	INT32U ALM_20:1;				//BIT0: ALARM	axis20 		0:VALID ALM
	INT32U ALM_21:1;				//BIT0: ALARM	axis21 		0:VALID ALM
	INT32U ALM_22:1;				//BIT0: ALARM	axis22 		0:VALID ALM
	INT32U INVALID:23;				//INVALID
};

union SERVO_ALARM2_IN_REG {
   INT32U               all;
   struct SERVO_ALARM2_IN_BITS  bit;
};



struct  SERVO_COIN1_IN_BITS 		//驱动器COIN1
{     // bits   description
	INT32U COIN_1:1;				//BIT0: COIN 	axis1	 		1:VALID COIN
	INT32U COIN_2:1;				//BIT0: COIN	axis2 		1:VALID COIN
	INT32U COIN_3:1;				//BIT0: COIN	axis3			1:VALID COIN
	INT32U COIN_4:1;				//BIT0: COIN	axis4 		1:VALID COIN
	INT32U COIN_5:1;				//BIT0: COIN	axis5 		1:VALID COIN
	INT32U COIN_15:1;				//BIT0: COIN	axis15 		1:VALID COIN
	INT32U COIN_16:1;				//BIT0: COIN	axis16 		1:VALID COIN
	INT32U COIN_17:1;				//BIT0: COIN	axis17 		1:VALID COIN
	INT32U COIN_18:1;				//BIT0: COIN	axis18 		1:VALID COIN
	INT32U COIN_11:1;				//BIT0: COIN	axis11 		1:VALID COIN
	INT32U COIN_12:1;				//BIT0: COIN	axis12 		1:VALID COIN
	INT32U COIN_13:1;				//BIT0: COIN	axis13 		1:VALID COIN
	INT32U COIN_14:1;				//BIT0: COIN	axis14 		1:VALID COIN
	INT32U COIN_23:1;				//BIT0: COIN	axis23 		1:VALID COIN
	INT32U INVALID:18;				//INVALID
};

union SERVO_COIN1_IN_REG {
   INT32U               all;
   struct SERVO_COIN1_IN_BITS  bit;
};


struct  SERVO_COIN2_IN_BITS 		//驱动器COIN2
{     // bits   description
	INT32U COIN_6:1;				//BIT0: COIN axis6	 		1:VALID COIN
	INT32U COIN_7:1;				//BIT0: COIN	axis7 		1:VALID COIN
	INT32U COIN_8:1;				//BIT0: COIN	axis8			1:VALID COIN
	INT32U COIN_9:1;				//BIT0: COIN	axis9 		1:VALID COIN
	INT32U COIN_10:1;				//BIT0: COIN	axis10 		1:VALID COIN
	//INT32U COIN_11:1;				//BIT0: COIN	axis11 		1:VALID COIN
	INT32U COIN_19:1;				//BIT0: COIN	axis19 		1:VALID COIN
	INT32U COIN_20:1;				//BIT0: COIN	axis20 		1:VALID COIN
	INT32U COIN_21:1;				//BIT0: COIN	axis21 		1:VALID COIN
	INT32U COIN_22:1;				//BIT0: COIN	axis22 		1:VALID COIN
	INT32U INVALID:23;				//INVALID
};

union SERVO_COIN2_IN_REG {
   INT32U               all;
   struct SERVO_COIN2_IN_BITS  bit;
};


struct  SERVO_HLIMIT_POS1_IN_BITS 		//驱动器HLIMIT_POS1
{     // bits   description
	INT32U HLIMIT_POS_1:1;				//BIT0: HLIMIT_POS 	axis1	 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_2:1;				//BIT0: HLIMIT_POS	axis2 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_3:1;				//BIT0: HLIMIT_POS	axis3			0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_4:1;				//BIT0: HLIMIT_POS	axis4 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_5:1;				//BIT0: HLIMIT_POS	axis5 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_15:1;				//BIT0: HLIMIT_POS	axis15 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_16:1;				//BIT0: HLIMIT_POS	axis16 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_17:1;				//BIT0: HLIMIT_POS	axis17 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_18:1;				//BIT0: HLIMIT_POS	axis18 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_11:1;				//BIT0: HLIMIT_POS	axis11 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_12:1;				//BIT0: HLIMIT_POS	axis12 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_13:1;				//BIT0: HLIMIT_POS	axis13 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_14:1;				//BIT0: HLIMIT_POS	axis14 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_23:1;				//BIT0: HLIMIT_POS	axis23 		0:VALID HLIMIT_POS
	INT32U INVALID:18;				//INVALID
};

union SERVO_HLIMIT_POS1_IN_REG {
   INT32U               all;
   struct SERVO_HLIMIT_POS1_IN_BITS  bit;
};


struct  SERVO_HLIMIT_POS2_IN_BITS 		//驱动器HLIMIT_POS2
{     // bits   description
	INT32U HLIMIT_POS_6:1;				//BIT0: HLIMIT_POS axis6	 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_7:1;				//BIT0: HLIMIT_POS	axis7 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_8:1;				//BIT0: HLIMIT_POS	axis8			0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_9:1;				//BIT0: HLIMIT_POS	axis9 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_10:1;				//BIT0: HLIMIT_POS	axis10 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_19:1;				//BIT0: HLIMIT_POS	axis19 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_20:1;				//BIT0: HLIMIT_POS	axis20 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_21:1;				//BIT0: HLIMIT_POS	axis21 		0:VALID HLIMIT_POS
	INT32U HLIMIT_POS_22:1;				//BIT0: HLIMIT_POS	axis22 		0:VALID HLIMIT_POS
	INT32U INVALID:23;				//INVALID
};

union SERVO_HLIMIT_POS2_IN_REG {
   INT32U               all;
   struct SERVO_HLIMIT_POS2_IN_BITS  bit;
};


struct  SERVO_HLIMIT_NEG1_IN_BITS 		//驱动器HLIMIT_NEG1
{     // bits   description
	INT32U HLIMIT_NEG_1:1;				//BIT0: HLIMIT_NEG 	axis1	 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_2:1;				//BIT0: HLIMIT_NEG	axis2 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_3:1;				//BIT0: HLIMIT_NEG	axis3			0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_4:1;				//BIT0: HLIMIT_NEG	axis4 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_5:1;				//BIT0: HLIMIT_NEG	axis5 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_15:1;				//BIT0: HLIMIT_NEG	axis15 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_16:1;				//BIT0: HLIMIT_NEG	axis16 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_17:1;				//BIT0: HLIMIT_NEG	axis17 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_18:1;				//BIT0: HLIMIT_NEG	axis18 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_11:1;				//BIT0: HLIMIT_NEG	axis11 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_12:1;				//BIT0: HLIMIT_NEG	axis12 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_13:1;				//BIT0: HLIMIT_NEG	axis13 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_14:1;				//BIT0: HLIMIT_NEG	axis14 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_23:1;				//BIT0: HLIMIT_NEG	axis23 		0:VALID HLIMIT_NEG
	INT32U INVALID:18;				//INVALID
};

union SERVO_HLIMIT_NEG1_IN_REG {
   INT32U               all;
   struct SERVO_HLIMIT_NEG1_IN_BITS  bit;
};


struct  SERVO_HLIMIT_NEG2_IN_BITS 		//驱动器HLIMIT_NEG2
{     // bits   description
	INT32U HLIMIT_NEG_6:1;				//BIT0: HLIMIT_NEG axis6	 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_7:1;				//BIT0: HLIMIT_NEG	axis7 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_8:1;				//BIT0: HLIMIT_NEG	axis8			0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_9:1;				//BIT0: HLIMIT_NEG	axis9 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_10:1;				//BIT0: HLIMIT_NEG	axis10 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_19:1;				//BIT0: HLIMIT_NEG	axis19 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_20:1;				//BIT0: HLIMIT_NEG	axis20 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_21:1;				//BIT0: HLIMIT_NEG	axis21 		0:VALID HLIMIT_NEG
	INT32U HLIMIT_NEG_22:1;				//BIT0: HLIMIT_NEG	axis22 		0:VALID HLIMIT_NEG
	INT32U INVALID:23;				//INVALID
};

union SERVO_HLIMIT_NEG2_IN_REG {
   INT32U               all;
   struct SERVO_HLIMIT_NEG2_IN_BITS  bit;
};


struct  SERVO_ENCODER_R1_IN_BITS 		//驱动器ENCODER_R1
{     // bits   description
	INT32U ENCODER_R_1:1;				//BIT0: ENCODER_R 	axis1	 		0:VALID ENCODER_R
	INT32U ENCODER_R_2:1;				//BIT0: ENCODER_R	axis2 		0:VALID ENCODER_R
	INT32U ENCODER_R_3:1;				//BIT0: ENCODER_R	axis3			0:VALID ENCODER_R
	INT32U ENCODER_R_4:1;				//BIT0: ENCODER_R	axis4 		0:VALID ENCODER_R
	INT32U ENCODER_R_5:1;				//BIT0: ENCODER_R	axis5 		0:VALID ENCODER_R
	INT32U ENCODER_R_15:1;				//BIT0: ENCODER_R	axis15 		0:VALID ENCODER_R
	INT32U ENCODER_R_16:1;				//BIT0: ENCODER_R	axis16 		0:VALID ENCODER_R
	INT32U ENCODER_R_17:1;				//BIT0: ENCODER_R	axis17 		0:VALID ENCODER_R
	INT32U ENCODER_R_18:1;				//BIT0: ENCODER_R	axis18 		0:VALID ENCODER_R
	INT32U ENCODER_R_11:1;				//BIT0: ENCODER_R	axis11 		0:VALID ENCODER_R
	INT32U ENCODER_R_12:1;				//BIT0: ENCODER_R	axis12 		0:VALID ENCODER_R
	INT32U ENCODER_R_13:1;				//BIT0: ENCODER_R	axis13 		0:VALID ENCODER_R
	INT32U ENCODER_R_14:1;				//BIT0: ENCODER_R	axis14 		0:VALID ENCODER_R
	INT32U ENCODER_R_23:1;				//BIT0: ENCODER_R	axis23 		0:VALID ENCODER_R
	INT32U INVALID:18;				//INVALID
};

union SERVO_ENCODER_R1_IN_REG {
   INT32U               all;
   struct SERVO_ENCODER_R1_IN_BITS  bit;
};


struct  SERVO_ENCODER_R2_IN_BITS 		//驱动器ENCODER_R2
{     // bits   description
	INT32U ENCODER_R_6:1;				//BIT0: ENCODER_R axis6	 		0:VALID ENCODER_R
	INT32U ENCODER_R_7:1;				//BIT0: ENCODER_R	axis7 		0:VALID ENCODER_R
	INT32U ENCODER_R_8:1;				//BIT0: ENCODER_R	axis8			0:VALID ENCODER_R
	INT32U ENCODER_R_9:1;				//BIT0: ENCODER_R	axis9 		0:VALID ENCODER_R
	INT32U ENCODER_R_10:1;				//BIT0: ENCODER_R	axis10 		0:VALID ENCODER_R
	INT32U ENCODER_R_19:1;				//BIT0: ENCODER_R	axis19 		0:VALID ENCODER_R
	INT32U ENCODER_R_20:1;				//BIT0: ENCODER_R	axis20 		0:VALID ENCODER_R
	INT32U ENCODER_R_21:1;				//BIT0: ENCODER_R	axis21 		0:VALID ENCODER_R
	INT32U ENCODER_R_22:1;				//BIT0: ENCODER_R	axis22 		0:VALID ENCODER_R
	INT32U INVALID:23;				//INVALID
};

union SERVO_ENCODER_R2_IN_REG {
   INT32U               all;
   struct SERVO_ENCODER_R2_IN_BITS  bit;
};

struct  GPIO_IN1_BITS 		//GPIO_IN1
{     // bits   description
	INT32U GPIOIN1:1;		//BIT0: GPIOIN1	 		
	INT32U GPIOIN2:1;		//BIT1: GPIOIN2	 		
	INT32U GPIOIN3:1;		//BIT2: GPIOIN3	 		
	INT32U GPIOIN4:1;		//BIT3: GPIOIN4	 		
	INT32U GPIOIN5:1;		//BIT4: GPIOIN5	 		
	INT32U GPIOIN6:1;		//BIT5: GPIOIN6	 		
	INT32U GPIOIN7:1;		//BIT6: GPIOIN7
	INT32U GPIOIN8:1;		//BIT7: GPIOIN8
	INT32U GPIOIN9:1;		//BIT8: GPIOIN9
	INT32U GPIOIN10:1;		//BIT9: GPIOIN10
	INT32U GPIOIN11:1;		//BIT10: GPIOIN11
	INT32U GPIOIN12:1;		//BIT11: GPIOIN12
	INT32U GPIOIN13:1;		//BIT12: GPIOIN13
	INT32U GPIOIN14:1;		//BIT13: GPIOIN14
	INT32U GPIOIN15:1;		//BIT14: GPIOIN15
	INT32U GPIOIN16:1;		//BIT15: GPIOIN16
	INT32U INVALID:16;				//INVALID
};

union GPIO_IN1_REG {
   INT32U               all;
   struct GPIO_IN1_BITS  bit;
};


struct  GPIO_IN2_BITS 		//GPIO_IN2
{     // bits   description
	INT32U GPIOIN1:1;		//BIT0: GPIOIN1	 		
	INT32U GPIOIN2:1;		//BIT1: GPIOIN2	 		
	INT32U GPIOIN3:1;		//BIT2: GPIOIN3	 		
	INT32U GPIOIN4:1;		//BIT3: GPIOIN4	 		
	INT32U GPIOIN5:1;		//BIT4: GPIOIN5	 		
	INT32U GPIOIN6:1;		//BIT5: GPIOIN6	 		
	INT32U GPIOIN7:1;		//BIT6: GPIOIN7
	INT32U GPIOIN8:1;		//BIT7: GPIOIN8
	INT32U GPIOIN9:1;		//BIT8: GPIOIN9
	INT32U GPIOIN10:1;		//BIT9: GPIOIN10
	INT32U GPIOIN11:1;		//BIT10: GPIOIN11
	INT32U GPIOIN12:1;		//BIT11: GPIOIN12
	INT32U GPIOIN13:1;		//BIT12: GPIOIN13
	INT32U GPIOIN14:1;		//BIT13: GPIOIN14
	INT32U GPIOIN15:1;		//BIT14: GPIOIN15
	INT32U GPIOIN16:1;		//BIT15: GPIOIN16
	INT32U INVALID:16;				//INVALID
};

union GPIO_IN2_REG {
   INT32U               all;
   struct GPIO_IN2_BITS  bit;
};


struct  GPIO_IN3_BITS 		//GPIO_IN3
{     // bits   description
	INT32U GPIOIN1:1;		//BIT0: GPIOIN1	 		
	INT32U GPIOIN2:1;		//BIT1: GPIOIN2	 		
	INT32U GPIOIN3:1;		//BIT2: GPIOIN3	 		
	INT32U GPIOIN4:1;		//BIT3: GPIOIN4	 		
	INT32U GPIOIN5:1;		//BIT4: GPIOIN5	 		
	INT32U GPIOIN6:1;		//BIT5: GPIOIN6	 		
	INT32U GPIOIN7:1;		//BIT6: GPIOIN7
	INT32U GPIOIN8:1;		//BIT7: GPIOIN8
	INT32U GPIOIN9:1;		//BIT8: GPIOIN9
	INT32U GPIOIN10:1;		//BIT9: GPIOIN10
	INT32U GPIOIN11:1;		//BIT10: GPIOIN11
	INT32U GPIOIN12:1;		//BIT11: GPIOIN12
	INT32U GPIOIN13:1;		//BIT12: GPIOIN13
	INT32U GPIOIN14:1;		//BIT13: GPIOIN14
	INT32U GPIOIN15:1;		//BIT14: GPIOIN15
	INT32U GPIOIN16:1;		//BIT15: GPIOIN16
	INT32U INVALID:16;				//INVALID
};

union GPIO_IN3_REG {
   INT32U               all;
   struct GPIO_IN3_BITS  bit;
};


struct  GPIO_IN4_BITS 		//GPIO_IN4
{     // bits   description
	INT32U GPIOIN1:1;		//BIT0: GPIOIN1	 		
	INT32U GPIOIN2:1;		//BIT1: GPIOIN2	 		
	INT32U GPIOIN3:1;		//BIT2: GPIOIN3	 		
	INT32U GPIOIN4:1;		//BIT3: GPIOIN4	 		
	INT32U GPIOIN5:1;		//BIT4: GPIOIN5	 		
	INT32U GPIOIN6:1;		//BIT5: GPIOIN6	 		
	INT32U GPIOIN7:1;		//BIT6: GPIOIN7
	INT32U GPIOIN8:1;		//BIT7: GPIOIN8
	INT32U GPIOIN9:1;		//BIT8: GPIOIN9
	INT32U GPIOIN10:1;		//BIT9: GPIOIN10
	INT32U GPIOIN11:1;		//BIT10: GPIOIN11
	INT32U GPIOIN12:1;		//BIT11: GPIOIN12
	INT32U GPIOIN13:1;		//BIT12: GPIOIN13
	INT32U GPIOIN14:1;		//BIT13: GPIOIN14
	INT32U GPIOIN15:1;		//BIT14: GPIOIN15
	INT32U GPIOIN16:1;		//BIT15: GPIOIN16
	INT32U INVALID:16;				//INVALID
};

union GPIO_IN4_REG {
   INT32U               all;
   struct GPIO_IN4_BITS  bit;
};

struct  SERVO_COM_READSIGN_BITS 		//通信串口及ＲＳ标志位
{     // bits   description
	INT32U UART_1:1;				//UART_1		1:无数据0:有数据可读
	INT32U UART_2:1;				//UART_2		1:无数据0:有数据可读
	INT32U UART_3:1;				//UART_3		1:无数据0:有数据可读
	INT32U UART_4:1;				//UART_4		1:无数据0:有数据可读
	INT32U UART_5:1;				//UART_5		1:无数据0:有数据可读
	INT32U UART_6:1;				//UART_6		1:无数据0:有数据可读
	INT32U UART_7:1;				//UART_7		1:无数据0:有数据可读
	INT32U UART_8:1;				//UART_8		1:无数据0:有数据可读
	INT32U RS232_1:1;			//RS232_1		1:无数据0:有数据可读
	INT32U RS232_2:1;			//RS232_2		1:无数据0:有数据可读
	INT32U RS232_3:1;			//RS232_3		1:无数据0:有数据可读
	INT32U RS232_4:1;			//RS232_4		1:无数据0:有数据可读
	INT32U RS485_1:1;			//RS485_1		1:无数据0:有数据可读
	INT32U RS485_2:1;			//RS485_2		1:无数据0:有数据可读
	INT32U RS490_1:1;			//RS490_1		1:无数据0:有数据可读
	INT32U RS490_2:1;			//RS490_2		1:无数据0:有数据可读
	INT32U INVALID:16;			
};

union SERVO_COM_READSIGN_REG {
   INT32U               all;
   struct SERVO_COM_READSIGN_BITS  bit;
};


//Output
struct  SERVO_LPMEN_BITS 		//LPMEN
{     // bits   description
	INT32U LPMEN_1:1;				//BIT0: LPMEN_1 		1:VALID LPMEN
	INT32U LPMEN_2:1;				//BIT0: LPMEN_2 		1:VALID LPMEN
	INT32U LPMEN_3:1;				//BIT0: LPMEN_3			1:VALID LPMEN
	INT32U LPMEN_4:1;				//BIT0: LPMEN_4 		1:VALID LPMEN
	INT32U INVALID:28;				//INVALID
};

union SERVO_LPMEN_REG {
   INT32U               all;
   struct SERVO_LPMEN_BITS  bit;
};


struct  SERVO_ON1_OUT_BITS 		//驱动器SERVO_ON1
{     // bits   description
	INT32U SERVO_ON_1:1;				//BIT0: SERVO_ON 	axis1	 		0:VALID SERVO_ON
	INT32U SERVO_ON_2:1;				//BIT0: SERVO_ON	axis2 		0:VALID SERVO_ON
	INT32U SERVO_ON_3:1;				//BIT0: SERVO_ON	axis3			0:VALID SERVO_ON
	INT32U SERVO_ON_4:1;				//BIT0: SERVO_ON	axis4 		0:VALID SERVO_ON
	INT32U SERVO_ON_5:1;				//BIT0: SERVO_ON	axis5 		0:VALID SERVO_ON
	INT32U SERVO_ON_15:1;				//BIT0: SERVO_ON	axis15 		0:VALID SERVO_ON
	INT32U SERVO_ON_16:1;				//BIT0: SERVO_ON	axis16 		0:VALID SERVO_ON
	INT32U SERVO_ON_17:1;				//BIT0: SERVO_ON	axis17 		0:VALID SERVO_ON
	INT32U SERVO_ON_18:1;				//BIT0: SERVO_ON	axis18 		0:VALID SERVO_ON
	INT32U SERVO_ON_11:1;				//BIT0: SERVO_ON	axis11 		0:VALID SERVO_ON
	INT32U SERVO_ON_12:1;				//BIT0: SERVO_ON	axis12 		0:VALID SERVO_ON
	INT32U SERVO_ON_13:1;				//BIT0: SERVO_ON	axis13 		0:VALID SERVO_ON
	INT32U SERVO_ON_14:1;				//BIT0: SERVO_ON	axis14 		0:VALID SERVO_ON
	INT32U SERVO_ON_23:1;				//BIT0: SERVO_ON	axis23 		0:VALID SERVO_ON
	INT32U INVALID:18;				//INVALID
};

union SERVO_ON1_OUT_REG {
   INT32U               all;
   struct SERVO_ON1_OUT_BITS  bit;
};


struct  SERVO_ON2_OUT_BITS 		//驱动器SERVO_ON2
{     // bits   description
	INT32U SERVO_ON_6:1;				//BIT0: SERVO_ON axis6	 		0:VALID SERVO_ON
	INT32U SERVO_ON_7:1;				//BIT0: SERVO_ON	axis7 		0:VALID SERVO_ON
	INT32U SERVO_ON_8:1;				//BIT0: SERVO_ON	axis8			0:VALID SERVO_ON
	INT32U SERVO_ON_9:1;				//BIT0: SERVO_ON	axis9 		0:VALID SERVO_ON
	INT32U SERVO_ON_10:1;				//BIT0: SERVO_ON	axis10 		0:VALID SERVO_ON
	INT32U SERVO_ON_19:1;				//BIT0: SERVO_ON	axis19 		0:VALID SERVO_ON
	INT32U SERVO_ON_20:1;				//BIT0: SERVO_ON	axis20 		0:VALID SERVO_ON
	INT32U SERVO_ON_21:1;				//BIT0: SERVO_ON	axis21 		0:VALID SERVO_ON
	INT32U SERVO_ON_22:1;				//BIT0: SERVO_ON	axis22 		0:VALID SERVO_ON
	INT32U INVALID:23;				//INVALID
};

union SERVO_ON2_OUT_REG {
   INT32U               all;
   struct SERVO_ON2_OUT_BITS  bit;
};


struct  SERVO_SIGN1_OUT_BITS 		//驱动器SERVO_SIGN1
{     // bits   description
	INT32U SERVO_SIGN_1:1;				//BIT0: SERVO_SIGN 	axis1	 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_2:1;				//BIT0: SERVO_SIGN	axis2 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_3:1;				//BIT0: SERVO_SIGN	axis3			0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_4:1;				//BIT0: SERVO_SIGN	axis4 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_5:1;				//BIT0: SERVO_SIGN	axis5 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_15:1;				//BIT0: SERVO_SIGN	axis15 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_16:1;				//BIT0: SERVO_SIGN	axis16 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_17:1;				//BIT0: SERVO_SIGN	axis17 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_18:1;				//BIT0: SERVO_SIGN	axis18 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_11:1;				//BIT0: SERVO_SIGN	axis11 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_12:1;				//BIT0: SERVO_SIGN	axis12 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_13:1;				//BIT0: SERVO_SIGN	axis13 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_14:1;				//BIT0: SERVO_SIGN	axis14 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_23:1;				//BIT0: SERVO_SIGN	axis23 		0:VALID SERVO_SIGN
	INT32U INVALID:18;				//INVALID
};

union SERVO_SIGN1_OUT_REG {
   INT32U               all;
   struct SERVO_SIGN1_OUT_BITS  bit;
};


struct  SERVO_SIGN2_OUT_BITS 		//驱动器SERVO_SIGN2
{     // bits   description
	INT32U SERVO_SIGN_6:1;				//BIT0: SERVO_SIGN axis6	 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_7:1;				//BIT0: SERVO_SIGN	axis7 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_8:1;				//BIT0: SERVO_SIGN	axis8			0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_9:1;				//BIT0: SERVO_SIGN	axis9 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_10:1;				//BIT0: SERVO_SIGN	axis10 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_19:1;				//BIT0: SERVO_SIGN	axis19 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_20:1;				//BIT0: SERVO_SIGN	axis20 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_21:1;				//BIT0: SERVO_SIGN	axis21 		0:VALID SERVO_SIGN
	INT32U SERVO_SIGN_22:1;				//BIT0: SERVO_SIGN	axis22 		0:VALID SERVO_SIGN
	INT32U INVALID:23;				//INVALID
};

union SERVO_SIGN2_OUT_REG {
   INT32U               all;
   struct SERVO_SIGN2_OUT_BITS  bit;
};



struct  SERVO_ENCODER_CLEAR1_OUT_BITS 		//驱动器ENCODER_CLEAR1
{     // bits   description
	INT32U ENCODER_CLEAR_1:1;				//BIT0: ENCODER_CLEAR 	axis1	 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_2:1;				//BIT0: ENCODER_CLEAR	axis2 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_3:1;				//BIT0: ENCODER_CLEAR	axis3			0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_4:1;				//BIT0: ENCODER_CLEAR	axis4 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_5:1;				//BIT0: ENCODER_CLEAR	axis5 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_15:1;				//BIT0: ENCODER_CLEAR	axis15 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_16:1;				//BIT0: ENCODER_CLEAR	axis16 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_17:1;				//BIT0: ENCODER_CLEAR	axis17 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_18:1;				//BIT0: ENCODER_CLEAR	axis18 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_11:1;				//BIT0: ENCODER_CLEAR	axis11 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_12:1;				//BIT0: ENCODER_CLEAR	axis12 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_13:1;				//BIT0: ENCODER_CLEAR	axis13 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_14:1;				//BIT0: ENCODER_CLEAR	axis14 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_23:1;				//BIT0: ENCODER_CLEAR	axis23 		0:VALID ENCODER_CLEAR
	INT32U PMT_CLEAR_2:1;				//BIT0: PMT_CLEAR_2	 		0:VALID PMT2_CLEAR
	INT32U PMT_CLEAR_1:1;				//BIT0: PMT_CLEAR_1	 		0:VALID PMT1_CLEAR

	INT32U INVALID:16;				//INVALID
};

union SERVO_ENCODER_CLEAR1_OUT_REG {
   INT32U               all;
   struct SERVO_ENCODER_CLEAR1_OUT_BITS  bit;
};


struct  SERVO_ENCODER_CLEAR2_OUT_BITS 		//驱动器ENCODER_CLEAR2
{     // bits   description
	INT32U ENCODER_CLEAR_6:1;				//BIT0: ENCODER_CLEAR axis6	 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_7:1;				//BIT0: ENCODER_CLEAR	axis7 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_8:1;				//BIT0: ENCODER_CLEAR	axis8			0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_9:1;				//BIT0: ENCODER_CLEAR	axis9 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_10:1;				//BIT0: ENCODER_CLEAR	axis10 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_19:1;				//BIT0: ENCODER_CLEAR	axis19 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_20:1;				//BIT0: ENCODER_CLEAR	axis20 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_21:1;				//BIT0: ENCODER_CLEAR	axis21 		0:VALID ENCODER_CLEAR
	INT32U ENCODER_CLEAR_22:1;				//BIT0: ENCODER_CLEAR	axis22 		0:VALID ENCODER_CLEAR
	INT32U INVALID:23;				//INVALID
};

union SERVO_ENCODER_CLEAR2_OUT_REG {
   INT32U               all;
   struct SERVO_ENCODER_CLEAR2_OUT_BITS  bit;
};


struct  GPIO_OUT1_BITS 		//GPIO_OUT1
{     // bits   description
	INT32U GPIOOUT1:1;		//BIT0: GPIOOUT1	 		
	INT32U GPIOOUT2:1;		//BIT1: GPIOOUT2	 		
	INT32U GPIOOUT3:1;		//BIT2: GPIOOUT3	 		
	INT32U GPIOOUT4:1;		//BIT3: GPIOOUT4	 		
	INT32U GPIOOUT5:1;		//BIT4: GPIOOUT5	 		
	INT32U GPIOOUT6:1;		//BIT5: GPIOOUT6	 		
	INT32U GPIOOUT7:1;		//BIT6: GPIOOUT7
	INT32U GPIOOUT8:1;		//BIT7: GPIOOUT8
	INT32U GPIOOUT9:1;		//BIT8: GPIOOUT9
	INT32U GPIOOUT10:1;		//BIT9: GPIOOUT10
	INT32U GPIOOUT11:1;		//BIT10: GPIOOUT11
	INT32U GPIOOUT12:1;		//BIT11: GPIOOUT12
	INT32U GPIOOUT13:1;		//BIT12: GPIOOUT13
	INT32U GPIOOUT14:1;		//BIT13: GPIOOUT14
	INT32U GPIOOUT15:1;		//BIT14: GPIOOUT15
	INT32U GPIOOUT16:1;		//BIT15: GPIOOUT16
	INT32U INVALID:16;				//INVALID
};

union GPIO_OUT1_REG {
   INT32U               all;
   struct GPIO_OUT1_BITS  bit;
};

struct  GPIO_OUT2_BITS 		//GPIO_OUT2
{     // bits   description
	INT32U GPIOOUT1:1;		//BIT0: GPIOOUT1	 		
	INT32U GPIOOUT2:1;		//BIT1: GPIOOUT2	 		
	INT32U GPIOOUT3:1;		//BIT2: GPIOOUT3	 		
	INT32U GPIOOUT4:1;		//BIT3: GPIOOUT4	 		
	INT32U GPIOOUT5:1;		//BIT4: GPIOOUT5	 		
	INT32U GPIOOUT6:1;		//BIT5: GPIOOUT6	 		
	INT32U GPIOOUT7:1;		//BIT6: GPIOOUT7
	INT32U GPIOOUT8:1;		//BIT7: GPIOOUT8
	INT32U GPIOOUT9:1;		//BIT8: GPIOOUT9
	INT32U GPIOOUT10:1;		//BIT9: GPIOOUT10
	INT32U GPIOOUT11:1;		//BIT10: GPIOOUT11
	INT32U GPIOOUT12:1;		//BIT11: GPIOOUT12
	INT32U GPIOOUT13:1;		//BIT12: GPIOOUT13
	INT32U GPIOOUT14:1;		//BIT13: GPIOOUT14
	INT32U GPIOOUT15:1;		//BIT14: GPIOOUT15
	INT32U GPIOOUT16:1;		//BIT15: GPIOOUT16
	INT32U INVALID:16;				//INVALID
};

union GPIO_OUT2_REG {
   INT32U               all;
   struct GPIO_OUT2_BITS  bit;
};

struct  GPIO_OUT3_BITS 		//GPIO_OUT3
{     // bits   description
	INT32U GPIOOUT1:1;		//BIT0: GPIOOUT1	 		
	INT32U GPIOOUT2:1;		//BIT1: GPIOOUT2	 		
	INT32U GPIOOUT3:1;		//BIT2: GPIOOUT3	 		
	INT32U GPIOOUT4:1;		//BIT3: GPIOOUT4	 		
	INT32U GPIOOUT5:1;		//BIT4: GPIOOUT5	 		
	INT32U GPIOOUT6:1;		//BIT5: GPIOOUT6	 		
	INT32U GPIOOUT7:1;		//BIT6: GPIOOUT7
	INT32U GPIOOUT8:1;		//BIT7: GPIOOUT8
	INT32U GPIOOUT9:1;		//BIT8: GPIOOUT9
	INT32U GPIOOUT10:1;		//BIT9: GPIOOUT10
	INT32U GPIOOUT11:1;		//BIT10: GPIOOUT11
	INT32U GPIOOUT12:1;		//BIT11: GPIOOUT12
	INT32U GPIOOUT13:1;		//BIT12: GPIOOUT13
	INT32U GPIOOUT14:1;		//BIT13: GPIOOUT14
	INT32U GPIOOUT15:1;		//BIT14: GPIOOUT15
	INT32U GPIOOUT16:1;		//BIT15: GPIOOUT16
	INT32U INVALID:16;				//INVALID
};

union GPIO_OUT3_REG {
   INT32U               all;
   struct GPIO_OUT3_BITS  bit;
};

struct  GPIO_OUT4_BITS 		//GPIO_OUT4
{     // bits   description
	INT32U GPIOOUT1:1;		//BIT0: GPIOOUT1	 		
	INT32U GPIOOUT2:1;		//BIT1: GPIOOUT2	 		
	INT32U GPIOOUT3:1;		//BIT2: GPIOOUT3	 		
	INT32U GPIOOUT4:1;		//BIT3: GPIOOUT4	 		
	INT32U GPIOOUT5:1;		//BIT4: GPIOOUT5	 		
	INT32U GPIOOUT6:1;		//BIT5: GPIOOUT6	 		
	INT32U GPIOOUT7:1;		//BIT6: GPIOOUT7
	INT32U GPIOOUT8:1;		//BIT7: GPIOOUT8
	INT32U GPIOOUT9:1;		//BIT8: GPIOOUT9
	INT32U GPIOOUT10:1;		//BIT9: GPIOOUT10
	INT32U GPIOOUT11:1;		//BIT10: GPIOOUT11
	INT32U GPIOOUT12:1;		//BIT11: GPIOOUT12
	INT32U GPIOOUT13:1;		//BIT12: GPIOOUT13
	INT32U GPIOOUT14:1;		//BIT13: GPIOOUT14
	INT32U GPIOOUT15:1;		//BIT14: GPIOOUT15
	INT32U GPIOOUT16:1;		//BIT15: GPIOOUT16
	INT32U INVALID:16;				//INVALID
};

union GPIO_OUT4_REG {
   INT32U               all;
   struct GPIO_OUT4_BITS  bit;
};


//LED测试1
struct  LEDTest_OUT1_BITS 
{     // bits   description
	INT32U LED1:1;		//BIT0: LED1	 		
	INT32U LED2:1;		//BIT1: LED2	 		
	INT32U LED3:1;		//BIT2: LED3	 		
	INT32U LED4:1;		//BIT3: LED4	 		
	INT32U LED5:1;		//BIT4: LED5	 		
	INT32U LED6:1;		//BIT5: LED6	 		
	INT32U LED7:1;		//BIT6: LED7
	INT32U LED8:1;		//BIT7: LED8
	INT32U INVALID:24;				//INVALID
};

union LEDTest_OUT1_REG {
   INT32U               all;
   struct LEDTest_OUT1_BITS  bit;
};

//LED测试2
struct  LEDTest_OUT2_BITS 
{     // bits   description
	INT32U LED1:1;		//BIT0: LED1	 		
	INT32U LED2:1;		//BIT1: LED2	 		
	INT32U INVALID:30;				//INVALID
};

union LEDTest_OUT2_REG {
   INT32U               all;
   struct LEDTest_OUT2_BITS  bit;
};


struct  SERVO_COM_FIFO_IN_CLEAR_BITS 		//通信串口fifo输入清空
{     // bits   description
	INT32U UART_1:1;				//UART_1		1
	INT32U UART_2:1;				//UART_2		
	INT32U UART_3:1;				//UART_3		
	INT32U UART_4:1;				//UART_4		
	INT32U UART_5:1;				//UART_5		
	INT32U UART_6:1;				//UART_6		
	INT32U UART_7:1;				//UART_7		
	INT32U UART_8:1;				//UART_8		
	INT32U RS232_1:1;			//RS232_1	
	INT32U RS232_2:1;			//RS232_2	
	INT32U RS232_3:1;			//RS232_3	
	INT32U RS232_4:1;			//RS232_4	
	INT32U RS485_1:1;			//RS485_1	
	INT32U RS485_2:1;			//RS485_2	
	INT32U RS490_1:1;			//RS490_1	
	INT32U RS490_2:1;			//RS490_2	
	INT32U INVALID:16;			
};

union SERVO_COM_FIFO_IN_CLEAR_REG {
   INT32U               all;
   struct SERVO_COM_FIFO_IN_CLEAR_BITS  bit;
};


struct  SERVO_COM_FIFO_OUT_CLEAR_BITS 		//通信串口fifo输出清空
{     // bits   description
	INT32U UART_1:1;				//UART_1		1
	INT32U UART_2:1;				//UART_2		
	INT32U UART_3:1;				//UART_3		
	INT32U UART_4:1;				//UART_4		
	INT32U UART_5:1;				//UART_5		
	INT32U UART_6:1;				//UART_6		
	INT32U UART_7:1;				//UART_7		
	INT32U UART_8:1;				//UART_8		
	INT32U RS232_1:1;			//RS232_1	
	INT32U RS232_2:1;			//RS232_2	
	INT32U RS232_3:1;			//RS232_3	
	INT32U RS232_4:1;			//RS232_4	
	INT32U RS485_1:1;			//RS485_1	
	INT32U RS485_2:1;			//RS485_2	
	INT32U RS490_1:1;			//RS490_1	
	INT32U RS490_2:1;			//RS490_2	
	INT32U INVALID:16;			
};

union SERVO_COM_FIFO_OUT_CLEAR_REG {
   INT32U               all;
   struct SERVO_COM_FIFO_OUT_CLEAR_BITS  bit;
};


struct  MAINCOMMANDSIGN_BITS 
{     // bits   description
	Uint16 SIGN1:1;	
	Uint16 SIGN2:1;	
	Uint16 SIGN3:1;	
	Uint16 SIGN4:1;	
	Uint16 SIGN5:1;	
	Uint16 SIGN6:1;	
	Uint16 SIGN7:1;	
	Uint16 SIGN8:1;
	Uint16 SIGN9:1;
	Uint16 SIGN10:1;
	Uint16 SIGN11:1;	
	Uint16 SIGN12:1;	
	Uint16 SIGN13:1;	
	Uint16 SIGN14:1;	
	Uint16 SIGN15:1;	
	Uint16 SIGN16:1;
	Uint16 SIGN17:1;	
	Uint16 SIGN18:1;	
	Uint16 SIGN19:1;	
	Uint16 SIGN20:1;	
	Uint16 SIGN21:1;	
	Uint16 SIGN22:1;	
	Uint16 SIGN23:1;	
	Uint16 SIGN24:1;
	Uint16 SIGN25:1;
	Uint16 SIGN26:1;
	Uint16 SIGN27:1;	
	Uint16 SIGN28:1;	
	Uint16 SIGN29:1;	
	Uint16 SIGN30:1;	
	Uint16 SIGN31:1;	
	Uint16 SIGN32:1;
};
union MAINCOMMANDSIGN_REG {
   Uint32         all;
   struct MAINCOMMANDSIGN_BITS bit;
};

struct  MAINSTATUSSIGN_BITS 
{     // bits   description
	Uint16 SIGN1:1;	
	Uint16 SIGN2:1;	
	Uint16 SIGN3:1;	
	Uint16 SIGN4:1;	
	Uint16 SIGN5:1;	
	Uint16 SIGN6:1;	
	Uint16 SIGN7:1;	
	Uint16 SIGN8:1;
	Uint16 SIGN9:1;
	Uint16 SIGN10:1;
	Uint16 SIGN11:1;	
	Uint16 SIGN12:1;	
	Uint16 SIGN13:1;	
	Uint16 SIGN14:1;	
	Uint16 SIGN15:1;	
	Uint16 SIGN16:1;
	Uint16 SIGN17:1;	
	Uint16 SIGN18:1;	
	Uint16 SIGN19:1;	
	Uint16 SIGN20:1;	
	Uint16 SIGN21:1;	
	Uint16 SIGN22:1;	
	Uint16 SIGN23:1;	
	Uint16 SIGN24:1;
	Uint16 SIGN25:1;
	Uint16 SIGN26:1;
	Uint16 SIGN27:1;	
	Uint16 SIGN28:1;	
	Uint16 SIGN29:1;	
	Uint16 SIGN30:1;	
	Uint16 SIGN31:1;	
	Uint16 SIGN32:1;
};
union MAINSTATUSSIGN_REG {
   Uint32         all;
   struct MAINSTATUSSIGN_BITS bit;
};


typedef struct 
{
	volatile int *GPIO0_IRQStatus_RAW_0;
	volatile int *GPIO0_IRQStatus_RAW_1;
	volatile int *GPIO1_IRQStatus_RAW_0;
	volatile int *GPIO1_IRQStatus_RAW_1;

	volatile int *GPIO0_IRQStatus_0;
	volatile int *GPIO0_IRQStatus_1;
	volatile int *GPIO1_IRQStatus_0;
	volatile int *GPIO1_IRQStatus_1;
}
GPIO_IRQSTATUS;


#define mCPLD_BASE      0x11000000 
//cpld registers
//Read address as fllows
#define mCPLDADDR_ENCODER_Axis1_Low  	(mCPLD_BASE+0x00) 	//R
#define mCPLDADDR_ENCODER_Axis1_High  	(mCPLD_BASE+0x04) 	//R
#define mCPLDADDR_ENCODER_Axis2_Low  	(mCPLD_BASE+0x08) 	//R
#define mCPLDADDR_ENCODER_Axis2_High  	(mCPLD_BASE+0x0C) 	//R
#define mCPLDADDR_ENCODER_Axis3_Low  	(mCPLD_BASE+0x10) 	//R
#define mCPLDADDR_ENCODER_Axis3_High  	(mCPLD_BASE+0x14) 	//R
#define mCPLDADDR_ENCODER_Axis4_Low  	(mCPLD_BASE+0x18) 	//R
#define mCPLDADDR_ENCODER_Axis4_High  	(mCPLD_BASE+0x1C) 	//R
#define mCPLDADDR_ENCODER_Axis5_Low  	(mCPLD_BASE+0x20) 	//R
#define mCPLDADDR_ENCODER_Axis5_High  	(mCPLD_BASE+0x24) 	//R
#define mCPLDADDR_ENCODER_Axis6_Low  	(mCPLD_BASE+0x28) 	//R
#define mCPLDADDR_ENCODER_Axis6_High  	(mCPLD_BASE+0x2C) 	//R
#define mCPLDADDR_ENCODER_Axis7_Low  	(mCPLD_BASE+0x30) 	//R
#define mCPLDADDR_ENCODER_Axis7_High  	(mCPLD_BASE+0x34) 	//R
#define mCPLDADDR_ENCODER_Axis8_Low  	(mCPLD_BASE+0x38) 	//R
#define mCPLDADDR_ENCODER_Axis8_High  	(mCPLD_BASE+0x3C) 	//R
#define mCPLDADDR_ENCODER_Axis9_Low  	(mCPLD_BASE+0x40) 	//R
#define mCPLDADDR_ENCODER_Axis9_High  	(mCPLD_BASE+0x44) 	//R
#define mCPLDADDR_ENCODER_Axis10_Low  	(mCPLD_BASE+0x48) 	//R
#define mCPLDADDR_ENCODER_Axis10_High  	(mCPLD_BASE+0x4C) 	//R
#define mCPLDADDR_ENCODER_Axis11_Low  	(mCPLD_BASE+0x50) 	//R
#define mCPLDADDR_ENCODER_Axis11_High  	(mCPLD_BASE+0x54) 	//R
#define mCPLDADDR_ENCODER_Axis12_Low  	(mCPLD_BASE+0x58) 	//R
#define mCPLDADDR_ENCODER_Axis12_High  	(mCPLD_BASE+0x5C) 	//R
#define mCPLDADDR_ENCODER_Axis13_Low  	(mCPLD_BASE+0x60) 	//R
#define mCPLDADDR_ENCODER_Axis13_High  	(mCPLD_BASE+0x64) 	//R
#define mCPLDADDR_ENCODER_Axis14_Low  	(mCPLD_BASE+0x68) 	//R
#define mCPLDADDR_ENCODER_Axis14_High  	(mCPLD_BASE+0x6C) 	//R
#define mCPLDADDR_ENCODER_Axis15_Low  	(mCPLD_BASE+0x70) 	//R
#define mCPLDADDR_ENCODER_Axis15_High  	(mCPLD_BASE+0x74) 	//R
#define mCPLDADDR_ENCODER_Axis16_Low  	(mCPLD_BASE+0x78) 	//R
#define mCPLDADDR_ENCODER_Axis16_High  	(mCPLD_BASE+0x7C) 	//R
#define mCPLDADDR_ENCODER_Axis17_Low  	(mCPLD_BASE+0x80) 	//R
#define mCPLDADDR_ENCODER_Axis17_High  	(mCPLD_BASE+0x84) 	//R
#define mCPLDADDR_ENCODER_Axis18_Low  	(mCPLD_BASE+0x88) 	//R
#define mCPLDADDR_ENCODER_Axis18_High  	(mCPLD_BASE+0x8C) 	//R
#define mCPLDADDR_ENCODER_Axis19_Low  	(mCPLD_BASE+0x90) 	//R
#define mCPLDADDR_ENCODER_Axis19_High  	(mCPLD_BASE+0x94) 	//R
#define mCPLDADDR_ENCODER_Axis20_Low  	(mCPLD_BASE+0x98) 	//R
#define mCPLDADDR_ENCODER_Axis20_High  	(mCPLD_BASE+0x9C) 	//R
#define mCPLDADDR_ENCODER_Axis21_Low  	(mCPLD_BASE+0xA0) 	//R
#define mCPLDADDR_ENCODER_Axis21_High  	(mCPLD_BASE+0xA4) 	//R
#define mCPLDADDR_ENCODER_Axis22_Low  	(mCPLD_BASE+0xA8) 	//R
#define mCPLDADDR_ENCODER_Axis22_High  	(mCPLD_BASE+0xAC) 	//R
#define mCPLDADDR_ENCODER_Axis23_Low  	(mCPLD_BASE+0xB0) 	//R
#define mCPLDADDR_ENCODER_Axis23_High  	(mCPLD_BASE+0xB4) 	//R
#define mCPLDADDR_ENCODER_Axis24_Low  	(mCPLD_BASE+0xB8) 	//R
#define mCPLDADDR_ENCODER_Axis24_High  	(mCPLD_BASE+0xBC) 	//R

#define mCPLDADDR_SERVO_OVER1  	(mCPLD_BASE+0x498) 	//R
#define mCPLDADDR_SERVO_OVER2  	(mCPLD_BASE+0x49C) 	//R
#define mCPLDADDR_SERVO_ALARM1  	(mCPLD_BASE+0xC0) 	//R
#define mCPLDADDR_SERVO_ALARM2  	(mCPLD_BASE+0xC4) 	//R
#define mCPLDADDR_SERVO_COIN1  	(mCPLD_BASE+0xC8) 	//R
#define mCPLDADDR_SERVO_COIN2  	(mCPLD_BASE+0xCC) 	//R
#define mCPLDADDR_HARDLIMIT_POSITIVE1  	(mCPLD_BASE+0xD0) 	//R
#define mCPLDADDR_HARDLIMIT_POSITIVE2  	(mCPLD_BASE+0xD4) 	//R
#define mCPLDADDR_HARDLIMIT_NEGATIVE1  	(mCPLD_BASE+0xD8) 	//R
#define mCPLDADDR_HARDLIMIT_NEGATIVE2  	(mCPLD_BASE+0xDC) 	//R
#define mCPLDADDR_ENCODER1_REF  	(mCPLD_BASE+0xE0) 	//R
#define mCPLDADDR_ENCODER2_REF  	(mCPLD_BASE+0xE4) 	//R

#define  	mCPLDADDR_AD0  (mCPLD_BASE+0xE8) 	//R
#define  	mCPLDADDR_AD1  (mCPLD_BASE+0xEC) 	//R
#define  	mCPLDADDR_AD2  (mCPLD_BASE+0xF0) 	//R
#define  	mCPLDADDR_AD3  (mCPLD_BASE+0xF4) 	//R
#define  	mCPLDADDR_AD4  (mCPLD_BASE+0xF8) 	//R
#define  	mCPLDADDR_AD5  (mCPLD_BASE+0xFC) 	//R
#define  	mCPLDADDR_AD6  (mCPLD_BASE+0x100) 	//R
#define  	mCPLDADDR_AD7  (mCPLD_BASE+0x104) 	//R

#define mCPLDADDR_IO_IN1  	(mCPLD_BASE+0x108) 	//R
#define mCPLDADDR_IO_IN2  	(mCPLD_BASE+0x10C) 	//R
#define mCPLDADDR_IO_IN3  	(mCPLD_BASE+0x110) 	//R
#define mCPLDADDR_IO_IN4  	(mCPLD_BASE+0x114) 	//R


#define mCPLDADDR_READ_GPIO_UART0  	(mCPLD_BASE+0x118) 	//R
#define mCPLDADDR_READ_GPIO_UART1  	(mCPLD_BASE+0x11C) 	//R
#define mCPLDADDR_READ_GPIO_UART2  	(mCPLD_BASE+0x120) 	//R
#define mCPLDADDR_READ_GPIO_UART3  	(mCPLD_BASE+0x124) 	//R
#define mCPLDADDR_READ_GPIO_UART4  	(mCPLD_BASE+0x128) 	//R
#define mCPLDADDR_READ_GPIO_UART5  	(mCPLD_BASE+0x12C) 	//R
#define mCPLDADDR_READ_GPIO_UART6  	(mCPLD_BASE+0x130) 	//R
#define mCPLDADDR_READ_GPIO_UART7  	(mCPLD_BASE+0x134) 	//R

#define mCPLDADDR_READ_RS232_1  	(mCPLD_BASE+0x138) 	//R
#define mCPLDADDR_READ_RS232_2  	(mCPLD_BASE+0x13C) 	//R
#define mCPLDADDR_READ_RS232_3  	(mCPLD_BASE+0x140) 	//R
#define mCPLDADDR_READ_RS232_4  	(mCPLD_BASE+0x144) 	//R
#define mCPLDADDR_READ_RS485_1  	(mCPLD_BASE+0x148) 	//R
#define mCPLDADDR_READ_RS485_2  	(mCPLD_BASE+0x14C) 	//R
#define mCPLDADDR_READ_RS490_1  	(mCPLD_BASE+0x150) 	//R
#define mCPLDADDR_READ_RS490_2  	(mCPLD_BASE+0x154) 	//R


#define mCPLDADDR_READ_COM_ReadSign  	(mCPLD_BASE+0x158) 	//R

#define mCPLDADDR_READ_STM32_Data  	(mCPLD_BASE+0x15C) 	//R
#define mCPLDADDR_READ_STM32_ReadSign  	(mCPLD_BASE+0x160) 	//R

#define mCPLDADDR_READ_Baudrate_Uart_1_2  	(mCPLD_BASE+0x164) 	//R
#define mCPLDADDR_READ_Baudrate_Uart_3_4 	(mCPLD_BASE+0x168) 	//R
#define mCPLDADDR_READ_Baudrate_Uart_5_6  	(mCPLD_BASE+0x16C) 	//R
#define mCPLDADDR_READ_Baudrate_Uart_7_8  	(mCPLD_BASE+0x170) 	//R
#define mCPLDADDR_READ_Baudrate_RS232_1_2  	(mCPLD_BASE+0x174) 	//R
#define mCPLDADDR_READ_Baudrate_RS232_3_4  	(mCPLD_BASE+0x178) 	//R
#define mCPLDADDR_READ_Baudrate_RS485_1_2  	(mCPLD_BASE+0x17C) 	//R
#define mCPLDADDR_READ_Baudrate_RS490_1_2  	(mCPLD_BASE+0x180) 	//R

//(mCPLD_BASE+0x184) reserved

#define mCPLDADDR_ABSENCODER_Dir_Axis1  	(mCPLD_BASE+0x188) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis1  	(mCPLD_BASE+0x18C) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis1  	(mCPLD_BASE+0x190) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis1  	(mCPLD_BASE+0x194) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis1  	(mCPLD_BASE+0x198) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis1  	(mCPLD_BASE+0x19C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis1  	(mCPLD_BASE+0x1A0) 	
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis1  	(mCPLD_BASE+0x1A4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis1  	(mCPLD_BASE+0x1A8) 	
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis1  	(mCPLD_BASE+0x1AC) 	
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis1  	(mCPLD_BASE+0x1B0) 	
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis1  	(mCPLD_BASE+0x1B4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis1  	(mCPLD_BASE+0x1B8) 	
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis1  	(mCPLD_BASE+0x1BC) 	

#define mCPLDADDR_ABSENCODER_Dir_Axis2  	(mCPLD_BASE+0x1C0) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis2  	(mCPLD_BASE+0x1C4) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis2  	(mCPLD_BASE+0x1C8) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis2  	(mCPLD_BASE+0x1CC) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis2  	(mCPLD_BASE+0x1D0) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis2  	(mCPLD_BASE+0x1D4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis2  	(mCPLD_BASE+0x1D8) 
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis2  	(mCPLD_BASE+0x1DC) 
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis2  	(mCPLD_BASE+0x1E0) 
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis2  	(mCPLD_BASE+0x1E4) 
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis2  	(mCPLD_BASE+0x1E8) 
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis2  	(mCPLD_BASE+0x1EC) 
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis2  	(mCPLD_BASE+0x1F0) 
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis2  	(mCPLD_BASE+0x1F4) 


#define mCPLDADDR_ABSENCODER_Dir_Axis3  	(mCPLD_BASE+0x1F8) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis3  	(mCPLD_BASE+0x1FC) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis3  	(mCPLD_BASE+0x200) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis3  	(mCPLD_BASE+0x204) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis3  	(mCPLD_BASE+0x208) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis3  	(mCPLD_BASE+0x20C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis3  	(mCPLD_BASE+0x210) 
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis3  	(mCPLD_BASE+0x214) 
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis3  	(mCPLD_BASE+0x218) 
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis3  	(mCPLD_BASE+0x21C) 
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis3  	(mCPLD_BASE+0x220) 
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis3  	(mCPLD_BASE+0x224) 
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis3  	(mCPLD_BASE+0x228) 
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis3  	(mCPLD_BASE+0x22C) 

#define mCPLDADDR_ABSENCODER_Dir_Axis4  	(mCPLD_BASE+0x230) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis4  	(mCPLD_BASE+0x234) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis4  	(mCPLD_BASE+0x238) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis4  	(mCPLD_BASE+0x23C) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis4  	(mCPLD_BASE+0x240) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis4  	(mCPLD_BASE+0x244) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis4  	(mCPLD_BASE+0x248) 
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis4  	(mCPLD_BASE+0x24C) 
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis4  	(mCPLD_BASE+0x250) 
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis4  	(mCPLD_BASE+0x254) 
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis4  	(mCPLD_BASE+0x258) 
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis4  	(mCPLD_BASE+0x25C) 
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis4  	(mCPLD_BASE+0x260) 
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis4  	(mCPLD_BASE+0x264) 

#define mCPLDADDR_ABSENCODER_Dir_Axis5  	(mCPLD_BASE+0x268) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis5  	(mCPLD_BASE+0x26C) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis5  	(mCPLD_BASE+0x270) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis5  	(mCPLD_BASE+0x274) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis5  	(mCPLD_BASE+0x278) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis5  	(mCPLD_BASE+0x27C) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis5  	(mCPLD_BASE+0x280) 	
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis5  	(mCPLD_BASE+0x284) 	
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis5  	(mCPLD_BASE+0x288) 	
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis5  	(mCPLD_BASE+0x28C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis5  	(mCPLD_BASE+0x290) 	
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis5  	(mCPLD_BASE+0x294) 	
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis5  	(mCPLD_BASE+0x298) 	
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis5  	(mCPLD_BASE+0x29C) 	

#define mCPLDADDR_ABSENCODER_Dir_Axis6  	(mCPLD_BASE+0x2A0) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis6  	(mCPLD_BASE+0x2A4) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis6  	(mCPLD_BASE+0x2A8) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis6  	(mCPLD_BASE+0x2AC) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis6  	(mCPLD_BASE+0x2B0) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis6  	(mCPLD_BASE+0x2B4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis6  	(mCPLD_BASE+0x2B8) 	
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis6  	(mCPLD_BASE+0x2BC) 	
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis6  	(mCPLD_BASE+0x2C0) 	
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis6  	(mCPLD_BASE+0x2C4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis6  	(mCPLD_BASE+0x2C8) 	
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis6  	(mCPLD_BASE+0x2CC) 	
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis6  	(mCPLD_BASE+0x2D0) 	
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis6  	(mCPLD_BASE+0x2D4) 	

#define mCPLDADDR_ABSENCODER_Dir_Axis7  	(mCPLD_BASE+0x2D8)	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis7  	(mCPLD_BASE+0x2DC) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis7  	(mCPLD_BASE+0x2E0) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis7  	(mCPLD_BASE+0x2E4) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis7  	(mCPLD_BASE+0x2E8) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis7  	(mCPLD_BASE+0x2EC) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis7  	(mCPLD_BASE+0x2F0)  
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis7  	(mCPLD_BASE+0x2F4) 
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis7  	(mCPLD_BASE+0x2F8) 
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis7  	(mCPLD_BASE+0x2FC) 
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis7  	(mCPLD_BASE+0x300) 
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis7  	(mCPLD_BASE+0x304) 
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis7  	(mCPLD_BASE+0x308) 
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis7  	(mCPLD_BASE+0x30C) 

#define mCPLDADDR_ABSENCODER_Dir_Axis8  	(mCPLD_BASE+0x310) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis8  	(mCPLD_BASE+0x314)  
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis8  	(mCPLD_BASE+0x318) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis8  	(mCPLD_BASE+0x31C) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis8  	(mCPLD_BASE+0x320) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis8  	(mCPLD_BASE+0x324) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis8  	(mCPLD_BASE+0x328)  
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis8  	(mCPLD_BASE+0x32C) 
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis8  	(mCPLD_BASE+0x330) 
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis8  	(mCPLD_BASE+0x334) 
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis8  	(mCPLD_BASE+0x338) 
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis8  	(mCPLD_BASE+0x33C) 
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis8  	(mCPLD_BASE+0x340) 
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis8  	(mCPLD_BASE+0x344) 

#define mCPLDADDR_ABSENCODER_Dir_Axis9  	(mCPLD_BASE+0x348) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis9  	(mCPLD_BASE+0x34C)  
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis9  	(mCPLD_BASE+0x350) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis9  	(mCPLD_BASE+0x354) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis9  	(mCPLD_BASE+0x358) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis9  	(mCPLD_BASE+0x35C) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis9  	(mCPLD_BASE+0x360) 	 
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis9  	(mCPLD_BASE+0x364) 	
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis9  	(mCPLD_BASE+0x368) 	
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis9  	(mCPLD_BASE+0x36C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis9  	(mCPLD_BASE+0x370) 	
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis9  	(mCPLD_BASE+0x374) 	
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis9  	(mCPLD_BASE+0x378) 	
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis9  	(mCPLD_BASE+0x37C) 	

#define mCPLDADDR_ABSENCODER_Dir_Axis10  	(mCPLD_BASE+0x380) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis10  	(mCPLD_BASE+0x384) 	 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis10  	(mCPLD_BASE+0x388) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis10  	(mCPLD_BASE+0x38C) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis10  	(mCPLD_BASE+0x390) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis10  	(mCPLD_BASE+0x394) 	
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis10  	(mCPLD_BASE+0x398) 	 
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis10  	(mCPLD_BASE+0x39C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis10  	(mCPLD_BASE+0x3A0) 	
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis10  	(mCPLD_BASE+0x3A4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis10  	(mCPLD_BASE+0x3A8) 	
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis10  	(mCPLD_BASE+0x3AC) 	
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis10  	(mCPLD_BASE+0x3B0) 	
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis10  	(mCPLD_BASE+0x3B4) 	

#define mCPLDADDR_ABSENCODER_Dir_Axis11  	(mCPLD_BASE+0x3B8) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis11  	(mCPLD_BASE+0x3BC)  
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis11  	(mCPLD_BASE+0x3C0) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis11  	(mCPLD_BASE+0x3C4) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis11  	(mCPLD_BASE+0x3C8) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis11  	(mCPLD_BASE+0x3CC) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis11  	(mCPLD_BASE+0x3D0) 	 
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis11  	(mCPLD_BASE+0x3D4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis11  	(mCPLD_BASE+0x3D8) 	
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis11  	(mCPLD_BASE+0x3DC) 	
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis11  	(mCPLD_BASE+0x3E0) 	
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis11  	(mCPLD_BASE+0x3E4) 	
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis11  	(mCPLD_BASE+0x3E8) 	
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis11  	(mCPLD_BASE+0x3EC) 	

#define mCPLDADDR_ABSENCODER_Dir_Axis12  	(mCPLD_BASE+0x3F0) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis12  	(mCPLD_BASE+0x3F4)  
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis12  	(mCPLD_BASE+0x3F8) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis12  	(mCPLD_BASE+0x3FC) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis12  	(mCPLD_BASE+0x400) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis12  	(mCPLD_BASE+0x404) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis12  	(mCPLD_BASE+0x408)  
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis12  	(mCPLD_BASE+0x40C) 
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis12  	(mCPLD_BASE+0x410) 
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis12  	(mCPLD_BASE+0x414) 
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis12  	(mCPLD_BASE+0x418) 
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis12  	(mCPLD_BASE+0x41C) 
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis12  	(mCPLD_BASE+0x420) 
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis12  	(mCPLD_BASE+0x424)

#define mCPLDADDR_ABSENCODER_Dir_Axis13  	(mCPLD_BASE+0x428) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis13  	(mCPLD_BASE+0x42C) 	 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis13  	(mCPLD_BASE+0x430) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis13  	(mCPLD_BASE+0x434) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis13  	(mCPLD_BASE+0x438) 	
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis13  	(mCPLD_BASE+0x43C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis13  	(mCPLD_BASE+0x440)  
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis13  	(mCPLD_BASE+0x444) 
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis13  	(mCPLD_BASE+0x448) 
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis13  	(mCPLD_BASE+0x44C) 
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis13  	(mCPLD_BASE+0x450) 
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis13  	(mCPLD_BASE+0x454) 
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis13  	(mCPLD_BASE+0x458) 
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis13  	(mCPLD_BASE+0x45C) 

#define mCPLDADDR_ABSENCODER_Dir_Axis14  	(mCPLD_BASE+0x460) 	//R   low bit 0-7
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar0_Axis14  	(mCPLD_BASE+0x464)  
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar1_Axis14  	(mCPLD_BASE+0x468) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar2_Axis14  	(mCPLD_BASE+0x46C) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar3_Axis14  	(mCPLD_BASE+0x470) 
#define mCPLDADDR_ABSENCODER_RotateRingTotalNuberChar4_Axis14  	(mCPLD_BASE+0x474) 
#define mCPLDADDR_ABSENCODER_RingValueChar0_Axis14  	(mCPLD_BASE+0x478) 	 
#define mCPLDADDR_ABSENCODER_RingValueChar1_Axis14  	(mCPLD_BASE+0x47C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar2_Axis14  	(mCPLD_BASE+0x480) 	
#define mCPLDADDR_ABSENCODER_RingValueChar3_Axis14  	(mCPLD_BASE+0x484) 	
#define mCPLDADDR_ABSENCODER_RingValueChar4_Axis14  	(mCPLD_BASE+0x488) 	
#define mCPLDADDR_ABSENCODER_RingValueChar5_Axis14  	(mCPLD_BASE+0x48C) 	
#define mCPLDADDR_ABSENCODER_RingValueChar6_Axis14  	(mCPLD_BASE+0x490) 	
#define mCPLDADDR_ABSENCODER_RingValueChar7_Axis14  	(mCPLD_BASE+0x494) 	

#define mCPLDADDR_READ_COM_ReadSign2  	(mCPLD_BASE+0x504) 	//R
#define mCPLDADDR_READ_I2C_1  	(mCPLD_BASE+0x510) 	//R
#define mCPLDADDR_READ_I2C_2  	(mCPLD_BASE+0x514) 	//R
#define mCPLDADDR_READ_I2C_3  	(mCPLD_BASE+0x518) 	//R
#define mCPLDADDR_READ_I2C_4  	(mCPLD_BASE+0x51C) 	//R
#define mCPLDADDR_READ_RS485_3  	(mCPLD_BASE+0x520) 	//R
#define mCPLDADDR_READ_RS485_4  	(mCPLD_BASE+0x524) 	//R

#define mCPLDADDR_READ_PMT1_Low   	(mCPLD_BASE+0x530) 	//R
#define mCPLDADDR_READ_PMT1_High   	(mCPLD_BASE+0x534) 	//R
#define mCPLDADDR_READ_PMT2_Low   	(mCPLD_BASE+0x538) 	//R
#define mCPLDADDR_READ_PMT2_High   	(mCPLD_BASE+0x53c) 	//R


//Write address as fllows
#define mCPLDADDR_PWM_Axis1  	(mCPLD_BASE+0x800) 	
#define mCPLDADDR_PWM_Axis2  	(mCPLD_BASE+0x804) 	
#define mCPLDADDR_PWM_Axis3  	(mCPLD_BASE+0x808) 	
#define mCPLDADDR_PWM_Axis4  	(mCPLD_BASE+0x80C) 	
#define mCPLDADDR_PWM_Axis5  	(mCPLD_BASE+0x810) 	
#define mCPLDADDR_PWM_Axis6  	(mCPLD_BASE+0x814) 	
#define mCPLDADDR_PWM_Axis7  	(mCPLD_BASE+0x818) 	
#define mCPLDADDR_PWM_Axis8  	(mCPLD_BASE+0x81C) 
#define mCPLDADDR_PWM_Axis9  	(mCPLD_BASE+0x820) 	
#define mCPLDADDR_PWM_Axis10  	(mCPLD_BASE+0x824) 	
#define mCPLDADDR_PWM_Axis11  	(mCPLD_BASE+0x828) 	
#define mCPLDADDR_PWM_Axis12  	(mCPLD_BASE+0x82C) 
#define mCPLDADDR_PWM_Axis13  	(mCPLD_BASE+0x830) 	
#define mCPLDADDR_PWM_Axis14  	(mCPLD_BASE+0x834) 	
#define mCPLDADDR_PWM_Axis15		(mCPLD_BASE+0x838) 	
#define mCPLDADDR_PWM_Axis16  	(mCPLD_BASE+0x83C) 
#define mCPLDADDR_PWM_Axis17  	(mCPLD_BASE+0x840) 	
#define mCPLDADDR_PWM_Axis18  	(mCPLD_BASE+0x844) 	
#define mCPLDADDR_PWM_Axis19  	(mCPLD_BASE+0x848) 	
#define mCPLDADDR_PWM_Axis20  	(mCPLD_BASE+0x84C) 
#define mCPLDADDR_PWM_Axis21  	(mCPLD_BASE+0x850) 	
#define mCPLDADDR_PWM_Axis22  	(mCPLD_BASE+0x854) 	
#define mCPLDADDR_PWM_Axis23  	(mCPLD_BASE+0x858) 	

#define mCPLDADDR_LPM_Axis1  	(mCPLD_BASE+0x85C) 	
#define mCPLDADDR_LPM_Axis2  	(mCPLD_BASE+0x860) 	
#define mCPLDADDR_LPM_Axis3  	(mCPLD_BASE+0x864) 	
#define mCPLDADDR_LPM_Axis4	(mCPLD_BASE+0x868) 	
#define mCPLDADDR_LPM_Axis5  	(mCPLD_BASE+0x86C) 	
#define mCPLDADDR_LPM_Axis6  	(mCPLD_BASE+0x870) 	
#define mCPLDADDR_LPM_Axis7  	(mCPLD_BASE+0x874) 	
#define mCPLDADDR_LPM_Axis8	(mCPLD_BASE+0x878) 	
#define mCPLDADDR_LPM_Axis9  	(mCPLD_BASE+0x87C) 	
#define mCPLDADDR_LPM_Axis10  	(mCPLD_BASE+0x880) 	
#define mCPLDADDR_LPM_Axis11 	(mCPLD_BASE+0x884) 	
#define mCPLDADDR_LPM_Axis12	(mCPLD_BASE+0x888) 	
#define mCPLDADDR_LPM_Axis13  	(mCPLD_BASE+0x88C) 	
#define mCPLDADDR_LPM_Axis14  	(mCPLD_BASE+0x890) 	
#define mCPLDADDR_LPM_Axis15  	(mCPLD_BASE+0x894) 	
#define mCPLDADDR_LPM_Axis16	(mCPLD_BASE+0x898) 	
#define mCPLDADDR_LPM_Axis17	(mCPLD_BASE+0x89C) 	
#define mCPLDADDR_LPM_Axis18  	(mCPLD_BASE+0x8A0) 	
#define mCPLDADDR_LPM_Axis19  	(mCPLD_BASE+0x8A4) 	
#define mCPLDADDR_LPM_Axis20	(mCPLD_BASE+0x8A8) 	
#define mCPLDADDR_LPM_Axis21  	(mCPLD_BASE+0x8AC) 	
#define mCPLDADDR_LPM_Axis22  	(mCPLD_BASE+0x8B0) 	
#define mCPLDADDR_LPM_Axis23  	(mCPLD_BASE+0x8B4) 	

#define mCPLDADDR_LPM_Enable 	(mCPLD_BASE+0x8B8) 	

#define mCPLDADDR_SERVO_ON1 	(mCPLD_BASE+0x8BC) 	
#define mCPLDADDR_SERVO_ON2 	(mCPLD_BASE+0x8C0) 	

#define mCPLDADDR_SERVO_Dir1 	(mCPLD_BASE+0x8C4) 	
#define mCPLDADDR_SERVO_Dir2 	(mCPLD_BASE+0x8C8) 	

#define mCPLDADDR_ENCODER_Clear1 	(mCPLD_BASE+0x8CC) 	
#define mCPLDADDR_ENCODER_Clear2 	(mCPLD_BASE+0x8D0) 	

#define mCPLDADDR_IO_OUT1  	(mCPLD_BASE+0x8D4) 	//W
#define mCPLDADDR_IO_OUT2  	(mCPLD_BASE+0x8D8) 	//W

#define mCPLDADDR_LED_OUT1  	(mCPLD_BASE+0x8DC) 	//W bit 0~7
#define mCPLDADDR_LED_OUT2  	(mCPLD_BASE+0x8E0) 	//W bit 0~1

#define mCPLDADDR_ABSENCODER_SEN  	(mCPLD_BASE+0x8E4) //0x8E4	绝对编码器伺服信号SEN输出	轴14~1对应位13~0

#define mCPLDADDR_WRITE_Baudrate_Uart_1_2  	(mCPLD_BASE+0x8E8) 	//R
#define mCPLDADDR_WRITE_Baudrate_Uart_3_4 	(mCPLD_BASE+0x8EC) 	//R
#define mCPLDADDR_WRITE_Baudrate_Uart_5_6  	(mCPLD_BASE+0x8F0) 	//R
#define mCPLDADDR_WRITE_Baudrate_Uart_7_8  	(mCPLD_BASE+0x8F4) 	//R
#define mCPLDADDR_WRITE_Baudrate_RS232_1_2  	(mCPLD_BASE+0x8F8) 	//R
#define mCPLDADDR_WRITE_Baudrate_RS232_3_4  	(mCPLD_BASE+0x8FC) 	//R
#define mCPLDADDR_WRITE_Baudrate_RS485_1_2  	(mCPLD_BASE+0x900) 	//R
#define mCPLDADDR_WRITE_Baudrate_RS490_1_2  	(mCPLD_BASE+0x904) 	//R

#define mCPLDADDR_WRITE_GPIO_UART0  	(mCPLD_BASE+0x908) 	//W  data=bit0~7  
#define mCPLDADDR_WRITE_GPIO_UART1  	(mCPLD_BASE+0x90C) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_GPIO_UART2  	(mCPLD_BASE+0x910) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_GPIO_UART3  	(mCPLD_BASE+0x914) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_GPIO_UART4  	(mCPLD_BASE+0x918) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_GPIO_UART5  	(mCPLD_BASE+0x91C) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_GPIO_UART6  	(mCPLD_BASE+0x920) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_GPIO_UART7  	(mCPLD_BASE+0x924) 	//W  data=bit0~7

#define mCPLDADDR_WRITE_RS232_1  	(mCPLD_BASE+0x928) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_RS232_2  	(mCPLD_BASE+0x92C) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_RS232_3  	(mCPLD_BASE+0x930) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_RS232_4  	(mCPLD_BASE+0x934) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_RS485_1  	(mCPLD_BASE+0x938) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_RS485_2  	(mCPLD_BASE+0x93C) 	//W  data=bit0~7

#define mCPLDADDR_WRITE_RS490_1  	(mCPLD_BASE+0x940) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_RS490_2  	(mCPLD_BASE+0x944) 	//W  data=bit0~7

#define mCPLDADDR_COM_IN_FIFO_Clear  	(mCPLD_BASE+0x948) 	//W
#define mCPLDADDR_COM_OUT_FIFO_Clear  	(mCPLD_BASE+0x94C) 	//W

#define mCPLDADDR_WRITE_STM32_Data  	(mCPLD_BASE+0x950) 	//W  data=bit0~7
#define mCPLDADDR_STM32_IN_FIFO_Clear  	(mCPLD_BASE+0x954) 	//W 0x954	stm输入FIFO清空	0位有效	写1次0清空

#define mCPLDADDR_LED1_OUT_Time 	(mCPLD_BASE+0x958) //0x958	led1灯控时间	16位	单位　１us
#define mCPLDADDR_LED2_OUT_Time  	(mCPLD_BASE+0x95C) //0x95C	led2灯控时间	16位	
#define mCPLDADDR_LED_OUT_Ctrl  	(mCPLD_BASE+0x960) //0x960	LED灯控触发 bit0=1 灯1; bit1=1 灯2...	(写1即能触发一次)

#if 0
1、初始化时对地址  0X964  随便写入一个值，对AD值得进行锁定
2、LED1对应通道2，LED2对应通道3，
#endif
#define mCPLDADDR_DA_Convert (mCPLD_BASE+0x964) //0x964	DA convert
#define mCPLDADDR_DA_CS (mCPLD_BASE+0x968) //0x968	DA convert CS

//modify 20170413
#define mCPLDADDR_DA_RiseCount (mCPLD_BASE+0x96C) //0x96C	DA convert AutoSign
#define mCPLDADDR_DA_FallCount (mCPLD_BASE+0x970) //0x970	DA convert Vmax
#define mCPLDADDR_DA_HKeepCount (mCPLD_BASE+0x974) //0x974	DA convert Vs 
#define mCPLDADDR_DA_LKeepCount (mCPLD_BASE+0x978) //0x978	DA convert Cycle
#define mCPLDADDR_DA_HIncrument (mCPLD_BASE+0x97C) //0x97C	DA convert Divided

//add address 20170227
#define mCPLDADDR_WRITE_RS485_3  	(mCPLD_BASE+0x980) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_RS485_4  	(mCPLD_BASE+0x984) 	//W  data=bit0~7

//add address 20170227
#define mCPLDADDR_IO_OUT3  	(mCPLD_BASE+0x988) 	//W
#define mCPLDADDR_IO_OUT4  	(mCPLD_BASE+0x98C) 	//W

//add address 20170227
#if 0
1、初始化时对地址  0X990  随便写入一个值，对AD值得进行锁定
2、AD0对应通道1，AD1对应通道2，AD2对应通道3，AD3对应通道4，
#endif
#define mCPLDADDR_DA2_Convert (mCPLD_BASE+0x990) //0x990 DA convert
#define mCPLDADDR_DA2_CS (mCPLD_BASE+0x994) //0x994	DA convert CS

#define mCPLDADDR_DA2_AutoSign (mCPLD_BASE+0x998) //0x998	DA convert Autogign
#define mCPLDADDR_DA2_Vmax (mCPLD_BASE+0x99C) //0x99C	DA convert Max Voltage
#define mCPLDADDR_DA2_Vs (mCPLD_BASE+0x9A0) //0x9A0	DA convert Start Voltage 
#define mCPLDADDR_DA2_Cycle (mCPLD_BASE+0x9A4) //0x9A4	DA convert Cycle
#define mCPLDADDR_DA_LIncrument (mCPLD_BASE+0x9A8) //0x9A8	DA convert Divided


//add address 20170227
#define mCPLDADDR_WRITE_I2C_1  	(mCPLD_BASE+0x9B0) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_I2C_2  	(mCPLD_BASE+0x9B4) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_I2C_3  	(mCPLD_BASE+0x9B8) 	//W  data=bit0~7
#define mCPLDADDR_WRITE_I2C_4  	(mCPLD_BASE+0x9BC) 	//W  data=bit0~7

#define mCPLDADDR_COM_IN_FIFO_Clear_2  	(mCPLD_BASE+0x9C0) 	//W
#define mCPLDADDR_COM_OUT_FIFO_Clear_2    	(mCPLD_BASE+0x9C4) 	//W

//add adress 20170328 for AOTF
#define mCPLDADDR_AOTF_HighCount  		(mCPLD_BASE+0x9D0) 	//W
#define mCPLDADDR_AOTF_LowCount    		(mCPLD_BASE+0x9D4) 	//W
#define mCPLDADDR_AOTF_Phase  				(mCPLD_BASE+0x9D8) 	//W
#define mCPLDADDR_AOTF_Enable    			(mCPLD_BASE+0x9DC) 	//W

//add adress 20170328 for Pockels
#define mCPLDADDR_Pockels_HighCount  		(mCPLD_BASE+0x9E0) 	//W
#define mCPLDADDR_Pockels_LowCount    		(mCPLD_BASE+0x9E4) 	//W
#define mCPLDADDR_Pockels_Phase  			(mCPLD_BASE+0x9E8) 	//W
#define mCPLDADDR_Pockels_Enable    			(mCPLD_BASE+0x9EC) 	//W

//add adress 20170330 for PWM
#define mCPLDADDR_PWM_HighCount  			(mCPLD_BASE+0x9F0) 	//W
#define mCPLDADDR_PWM_LowCount    		(mCPLD_BASE+0x9F4) 	//W
#define mCPLDADDR_PWM_Phase  				(mCPLD_BASE+0x9F8) 	//W
#define mCPLDADDR_PWM_Enable    			(mCPLD_BASE+0x9FC) 	//W

#define mCPLDADDR_PWM2_HighCount  		(mCPLD_BASE+0xA00) 	//W
#define mCPLDADDR_PWM2_LowCount    		(mCPLD_BASE+0xA04) 	//W
#define mCPLDADDR_PWM2_Phase  			(mCPLD_BASE+0xA08) 	//W
#define mCPLDADDR_PWM2_Enable    			(mCPLD_BASE+0xA0C) 	//W

#define mCPLDADDR_DA3_Convert (mCPLD_BASE+0xA10) 		//0xA10 	DA convert
#define mCPLDADDR_DA3_CS (mCPLD_BASE+0xA14) 			//0xA14	DA convert CS

#define mCPLDADDR_DA_HDividedNum (mCPLD_BASE+0xA18) //0xA18		
#define mCPLDADDR_DA_LDividedNum (mCPLD_BASE+0xA1C) //0xA1C	

extern union SERVO_OVER1_IN_REG	Servo_Over1_In_Register;
extern union SERVO_OVER2_IN_REG	Servo_Over2_In_Register;
extern union SERVO_ALARM1_IN_REG	Servo_Alarm1_In_Register;
extern union SERVO_ALARM2_IN_REG	Servo_Alarm2_In_Register;
extern union SERVO_COIN1_IN_REG	Servo_Coin1_In_Register;
extern union SERVO_COIN2_IN_REG	Servo_Coin2_In_Register;
extern union SERVO_HLIMIT_POS1_IN_REG	Servo_HardLimit_Positive1_In_Register;
extern union SERVO_HLIMIT_POS2_IN_REG	Servo_HardLimit_Positive2_In_Register;
extern union SERVO_HLIMIT_NEG1_IN_REG	Servo_HardLimit_Negative1_In_Register;
extern union SERVO_HLIMIT_NEG2_IN_REG	Servo_HardLimit_Negative2_In_Register;
extern union SERVO_ENCODER_R1_IN_REG	Servo_Encoder_Reference1_In_Register;
extern union SERVO_ENCODER_R2_IN_REG	Servo_Encoder_Reference2_In_Register;
extern union GPIO_IN1_REG	GPIO_In1_Register;
extern union GPIO_IN2_REG	GPIO_In2_Register;
extern union GPIO_IN3_REG	GPIO_In3_Register;
extern union GPIO_IN4_REG	GPIO_In4_Register;
extern union SERVO_COM_READSIGN_REG	Servo_Com_ReadSign_Register;
extern union SERVO_LPMEN_REG	Servo_LPMEN_Register;
extern union SERVO_ON1_OUT_REG	Servo_On1_Out_Register;
extern union SERVO_ON2_OUT_REG	Servo_On2_Out_Register;
extern union SERVO_SIGN1_OUT_REG	Servo_Sign1_Out_Register;
extern union SERVO_SIGN2_OUT_REG	Servo_Sign2_Out_Register;
extern union SERVO_ENCODER_CLEAR1_OUT_REG	Servo_Encoder_Clear1_Out_Register;
extern union SERVO_ENCODER_CLEAR2_OUT_REG	Servo_Encoder_Clear2_Out_Register;
extern union GPIO_OUT1_REG		GPIO_Out1_Register;
extern union GPIO_OUT2_REG		GPIO_Out2_Register;
extern union GPIO_OUT3_REG		GPIO_Out3_Register;
extern union GPIO_OUT4_REG		GPIO_Out4_Register;
extern union LEDTest_OUT1_REG	LEDTest_Out1_Register;
extern union LEDTest_OUT2_REG	LEDTest_Out2_Register;
extern union SERVO_COM_FIFO_IN_CLEAR_REG	Servo_Com_FIFO_In_Clear_Register;
extern union SERVO_COM_FIFO_OUT_CLEAR_REG	Servo_Com_FIFO_Out_Clear_Register;

extern volatile INT16U * ENCODER_Axis1_Low; //AD转换0
extern volatile INT16U * ENCODER_Axis1_High; //AD转换0
extern volatile INT16U * ENCODER_Axis2_Low;
extern volatile INT16U * ENCODER_Axis2_High;
extern volatile INT16U * ENCODER_Axis3_Low; 
extern volatile INT16U * ENCODER_Axis3_High; 
extern volatile INT16U * ENCODER_Axis4_Low; 
extern volatile INT16U * ENCODER_Axis4_High     ; 
extern volatile INT16U * ENCODER_Axis5_Low    ; 
extern volatile INT16U * ENCODER_Axis5_High     ; 
extern volatile INT16U * ENCODER_Axis6_Low    ; 
extern volatile INT16U * ENCODER_Axis6_High     ; 
extern volatile INT16U * ENCODER_Axis7_Low    ; 
extern volatile INT16U * ENCODER_Axis7_High     ; 
extern volatile INT16U * ENCODER_Axis8_Low    ; 
extern volatile INT16U * ENCODER_Axis8_High     ; 
extern volatile INT16U * ENCODER_Axis9_Low    ; 
extern volatile INT16U * ENCODER_Axis9_High     ; 
extern volatile INT16U * ENCODER_Axis10_Low  ; 
extern volatile INT16U * ENCODER_Axis10_High   ; 
extern volatile INT16U * ENCODER_Axis11_Low  ; 
extern volatile INT16U * ENCODER_Axis11_High   ; 
extern volatile INT16U * ENCODER_Axis12_Low    ; 
extern volatile INT16U * ENCODER_Axis12_High     ; 
extern volatile INT16U * ENCODER_Axis13_Low    ; 
extern volatile INT16U * ENCODER_Axis13_High     ; 
extern volatile INT16U * ENCODER_Axis14_Low    ; 
extern volatile INT16U * ENCODER_Axis14_High     ; 
extern volatile INT16U * ENCODER_Axis15_Low    ; 
extern volatile INT16U * ENCODER_Axis15_High     ;  
extern volatile INT16U * ENCODER_Axis16_Low    ;  
extern volatile INT16U * ENCODER_Axis16_High     ;  
extern volatile INT16U * ENCODER_Axis17_Low    ;  
extern volatile INT16U * ENCODER_Axis17_High     ;  
extern volatile INT16U * ENCODER_Axis18_Low    ;  
extern volatile INT16U * ENCODER_Axis18_High     ;  
extern volatile INT16U * ENCODER_Axis19_Low    ;  
extern volatile INT16U * ENCODER_Axis19_High     ;  
extern volatile INT16U * ENCODER_Axis20_Low    ;  
extern volatile INT16U * ENCODER_Axis20_High     ;  
extern volatile INT16U * ENCODER_Axis21_Low    ;  
extern volatile INT16U * ENCODER_Axis21_High    ;  
extern volatile INT16U * ENCODER_Axis22_Low    ;  
extern volatile INT16U * ENCODER_Axis22_High    ;  
extern volatile INT16U * ENCODER_Axis23_Low    ;  
extern volatile INT16U * ENCODER_Axis23_High    ;  
extern volatile INT16U * ENCODER_Axis24_Low    ;  
extern volatile INT16U * ENCODER_Axis24_High     ; 

extern volatile INT16U * SERVO_ALARM1  	 ;  
extern volatile INT16U * SERVO_ALARM2  	  ; 
extern volatile INT16U * SERVO_COIN1;  
extern volatile INT16U * SERVO_COIN2;  
extern volatile INT16U * HARDLIMIT_POSITIVE1  	 ;  
extern volatile INT16U * HARDLIMIT_POSITIVE2  	  ; 
extern volatile INT16U * HARDLIMIT_NEGATIVE1  	 ;  
extern volatile INT16U * HARDLIMIT_NEGATIVE2  	  ; 
extern volatile INT16U * ENCODER1_REF ;
extern volatile INT16U * ENCODER2_REF ;

extern volatile INT16U *  AD0; 
extern volatile INT16U *  AD1; 
extern volatile INT16U *  AD2; 
extern volatile INT16U *  AD3; 
extern volatile INT16U *  AD4; 
extern volatile INT16U *  AD5; 
extern volatile INT16U *  AD6; 
extern volatile INT16U *  AD7 ; 

extern volatile INT16U * IO_IN1; 
extern volatile INT16U * IO_IN2; 
extern volatile INT16U * IO_IN3; 
extern volatile INT16U * IO_IN4; 


extern volatile INT16U * READ_GPIO_UART0; 
extern volatile INT16U * READ_GPIO_UART1; 
extern volatile INT16U * READ_GPIO_UART2; 
extern volatile INT16U * READ_GPIO_UART3; 
extern volatile INT16U * READ_GPIO_UART4; 
extern volatile INT16U * READ_GPIO_UART5; 
extern volatile INT16U * READ_GPIO_UART6; 
extern volatile INT16U * READ_GPIO_UART7; 

extern volatile INT16U * READ_RS232_1;
extern volatile INT16U * READ_RS232_2;
extern volatile INT16U * READ_RS232_3;
extern volatile INT16U * READ_RS232_4;
extern volatile INT16U * READ_RS485_1;
extern volatile INT16U * READ_RS485_2;
extern volatile INT16U * READ_RS485_3;
extern volatile INT16U * READ_RS485_4;
extern volatile INT16U * READ_RS490_1;
extern volatile INT16U * READ_RS490_2;
extern volatile INT16U * READ_I2C_1;
extern volatile INT16U * READ_I2C_2;
extern volatile INT16U * READ_I2C_3;
extern volatile INT16U * READ_I2C_4;

extern volatile INT16U * READ_COM_ReadSign;

extern volatile INT16U * READ_STM32_Data;
extern volatile INT16U * READ_STM32_ReadSign;

extern volatile INT16U * READ_Baudrate_Uart_1_2   ;
extern volatile INT16U * READ_Baudrate_Uart_3_4  ;
extern volatile INT16U * READ_Baudrate_Uart_5_6   ;
extern volatile INT16U * READ_Baudrate_Uart_7_8   ;
extern volatile INT16U * READ_Baudrate_RS232_1_2    ;
extern volatile INT16U * READ_Baudrate_RS232_3_4    ;
extern volatile INT16U * READ_Baudrate_RS485_1_2    ;
extern volatile INT16U * READ_Baudrate_RS490_1_2    ;

// _184) reserved

extern volatile INT16U * ABSENCODER_Dir_Axis1;   //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis1;
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis1;
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis1;
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis1;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis1;	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis1 ;	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis1 ;	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis1 ;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis1 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis1 ;	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis1 ;	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis1 ;	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis1 ;	

extern volatile INT16U * ABSENCODER_Dir_Axis2 ;   //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis2;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis2;
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis2; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis2;
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis2; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis2; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis2;	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis2;
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis2;
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis2;
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis2;
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis2;
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis2;


extern volatile INT16U * ABSENCODER_Dir_Axis3;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis3;
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis3; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis3; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis3;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis3;	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis3;	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis3;	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis3;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis3;	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis3;	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis3; 	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis3;	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis3;	


extern volatile INT16U * ABSENCODER_Dir_Axis4;   //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis4 ;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis4 ;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis4 ; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis4 ;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis4 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis4; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis4; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis4;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis4; 	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis4;	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis4; 	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis4; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis4; 	

extern volatile INT16U * ABSENCODER_Dir_Axis5;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis5; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis5; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis5;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis5;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis5; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis5; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis5; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis5;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis5;	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis5; 	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis5;	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis5; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis5;	

extern volatile INT16U * ABSENCODER_Dir_Axis6;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis6; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis6; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis6;
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis6; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis6; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis6;	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis6;	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis6;
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis6;	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis6;	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis6;	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis6;	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis6;	

extern volatile INT16U * ABSENCODER_Dir_Axis7;     //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis7; 
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis7;  	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis7;  	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis7; 
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis7; 
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis7;  	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis7; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis7; 	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis7;  	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis7; 	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis7;  	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis7;  	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis7; 	

extern volatile INT16U * ABSENCODER_Dir_Axis8;     //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis8;  	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis8; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis8; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis8; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis8; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis8; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis8;	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis8;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis8;	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis8;	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis8; 	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis8; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis8; 	

extern volatile INT16U * ABSENCODER_Dir_Axis9;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis9;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis9; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis9; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis9; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis9; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis9 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis9 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis9 ;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis9 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis9 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis9 ;	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis9 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis9 ; 	

extern volatile INT16U * ABSENCODER_Dir_Axis10;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis10; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis10; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis10; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis10; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis10; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis10; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis10; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis10;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis10; 	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis10;	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis10;	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis10; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis10; 	

extern volatile INT16U * ABSENCODER_Dir_Axis11;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis11; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis11; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis11;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis11; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis11; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis11;	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis11; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis11; 	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis11; 	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis11; 	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis11; 	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis11; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis11; 	

extern volatile INT16U * ABSENCODER_Dir_Axis12;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis12; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis12; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis12; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis12; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis12;	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis12 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis12 ;	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis12 ;	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis12 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis12 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis12 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis12 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis12 ; 	

extern volatile INT16U * ABSENCODER_Dir_Axis13;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis13; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis13; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis13; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis13; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis13; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis13 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis13 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis13 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis13 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis13 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis13 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis13 ; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis13 ; 	


extern volatile INT16U * ABSENCODER_Dir_Axis14;    //low bit 0-7
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar0_Axis14;	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar1_Axis14; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar2_Axis14; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar3_Axis14; 	
extern volatile INT16U * ABSENCODER_RotateRingTotalNuberChar4_Axis14; 	
extern volatile INT16U * ABSENCODER_RingValueChar0_Axis14; 	
extern volatile INT16U * ABSENCODER_RingValueChar1_Axis14; 	
extern volatile INT16U * ABSENCODER_RingValueChar2_Axis14; 	
extern volatile INT16U * ABSENCODER_RingValueChar3_Axis14;	
extern volatile INT16U * ABSENCODER_RingValueChar4_Axis14; 	
extern volatile INT16U * ABSENCODER_RingValueChar5_Axis14; 	
extern volatile INT16U * ABSENCODER_RingValueChar6_Axis14; 	
extern volatile INT16U * ABSENCODER_RingValueChar7_Axis14; 	

//added 20170407 for PMT counter
extern volatile INT16U * PMT1_Low; 
extern volatile INT16U * PMT1_High;
extern volatile INT16U * PMT2_Low;
extern volatile INT16U * PMT2_High;

//Write address as fllows
extern volatile INT16U * PWM_Axis1 ;	
extern volatile INT16U * PWM_Axis2 ;
extern volatile INT16U * PWM_Axis3 ;
extern volatile INT16U * PWM_Axis4 ;
extern volatile INT16U * PWM_Axis5 ;
extern volatile INT16U * PWM_Axis6 ;
extern volatile INT16U * PWM_Axis7 ;
extern volatile INT16U * PWM_Axis8  ;
extern volatile INT16U * PWM_Axis9  ;
extern volatile INT16U * PWM_Axis10;
extern volatile INT16U * PWM_Axis11;
extern volatile INT16U * PWM_Axis12;
extern volatile INT16U * PWM_Axis13;
extern volatile INT16U * PWM_Axis14;
extern volatile INT16U * PWM_Axis15 ;
extern volatile INT16U * PWM_Axis16;
extern volatile INT16U * PWM_Axis17;
extern volatile INT16U * PWM_Axis18;
extern volatile INT16U * PWM_Axis19;
extern volatile INT16U * PWM_Axis20;
extern volatile INT16U * PWM_Axis21;
extern volatile INT16U * PWM_Axis22;
extern volatile INT16U * PWM_Axis23;

extern volatile INT16U * LPM_Axis1;
extern volatile INT16U * LPM_Axis2;
extern volatile INT16U * LPM_Axis3;
extern volatile INT16U * LPM_Axis4;
extern volatile INT16U * LPM_Axis5;
extern volatile INT16U * LPM_Axis6;
extern volatile INT16U * LPM_Axis7;
extern volatile INT16U * LPM_Axis8;
extern volatile INT16U * LPM_Axis9;
extern volatile INT16U * LPM_Axis10         ;
extern volatile INT16U * LPM_Axis11  ;
extern volatile INT16U * LPM_Axis12 ;
extern volatile INT16U * LPM_Axis13         ;
extern volatile INT16U * LPM_Axis14         ;
extern volatile INT16U * LPM_Axis15         ;
extern volatile INT16U * LPM_Axis16 ;
extern volatile INT16U * LPM_Axis17 ;
extern volatile INT16U * LPM_Axis18         ;
extern volatile INT16U * LPM_Axis19         ;
extern volatile INT16U * LPM_Axis20	;
extern volatile INT16U * LPM_Axis21        ;	
extern volatile INT16U * LPM_Axis22        ;
extern volatile INT16U * LPM_Axis23        ;

extern volatile INT16U * LPM_Enable 	 ;

extern volatile INT16U * SERVO_ON1 	 ;	
extern volatile INT16U * SERVO_ON2 	 ;

extern volatile INT16U * SERVO_Dir1 	 ;
extern volatile INT16U * SERVO_Dir2 	 ;

extern volatile INT16U * ENCODER_Clear1  ;	
extern volatile INT16U * ENCODER_Clear2  ;	

extern volatile INT16U * IO_OUT1   ;	//W
extern volatile INT16U * IO_OUT2   ;	//W
extern volatile INT16U * IO_OUT3   ;	//W
extern volatile INT16U * IO_OUT4   ;	//W

extern volatile INT16U * LED_OUT1    ; 	//W bit 0~7
extern volatile INT16U * LED_OUT2    ; 	//W bit 0~1

extern volatile INT16U * ABSENCODER_SEN ;//0x8E4	绝对编码器伺服信号SEN输出	轴14~1对应位13~0

extern volatile INT16U * WRITE_Baudrate_Uart_1_2  	;
extern volatile INT16U * WRITE_Baudrate_Uart_3_4 	;
extern volatile INT16U * WRITE_Baudrate_Uart_5_6  	;
extern volatile INT16U * WRITE_Baudrate_Uart_7_8  	;
extern volatile INT16U * WRITE_Baudrate_RS232_1_2            ;
extern volatile INT16U * WRITE_Baudrate_RS232_3_4            ;
extern volatile INT16U * WRITE_Baudrate_RS485_1_2            ;
extern volatile INT16U * WRITE_Baudrate_RS490_1_2            ;

extern volatile INT16U * WRITE_GPIO_UART0  ; 	//W  data=bit0~7  
extern volatile INT16U * WRITE_GPIO_UART1  ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_GPIO_UART2  ;	//W  data=bit0~7
extern volatile INT16U * WRITE_GPIO_UART3  ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_GPIO_UART4  ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_GPIO_UART5  ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_GPIO_UART6  ; //W  data=bit0~7
extern volatile INT16U * WRITE_GPIO_UART7  ; 	//W  data=bit0~7

extern volatile INT16U * WRITE_RS232_1   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS232_2   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS232_3   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS232_4   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS485_1   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS485_2   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS485_3   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS485_4   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS490_1   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_RS490_2   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_I2C_1   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_I2C_2   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_I2C_3   ; 	//W  data=bit0~7
extern volatile INT16U * WRITE_I2C_4   ; 	//W  data=bit0~7

extern volatile INT16U * COM_IN_FIFO_Clear  	      ;	//W
extern volatile INT16U * COM_OUT_FIFO_Clear              ;	//W
extern volatile INT16U * COM_IN_FIFO_Clear_2;	//W
extern volatile INT16U * COM_OUT_FIFO_Clear_2              ;	//W

extern volatile INT16U * WRITE_STM32_Data             ; 	//W  data=bit0~7
extern volatile INT16U * STM32_IN_FIFO_Clear              ; 	//W 0x954	stm输入FIFO清空	0位有效	写1次0清空

extern volatile INT16U * LED1_OUT_Time 	     ; //0x958	led1灯控时间	16位	单位　１us
extern volatile INT16U * LED2_OUT_Time              ; //0x95C	led2灯控时间	16位	
extern volatile INT16U * LED_OUT_Ctrl  	 ; //0x960	LED灯控触发 bit0=1 灯1                           ; bit1=1 灯2...	(写1即能触发一次)

extern  AD5315DA  Ad_Convert;
extern  AD5315DA  Ad_Convert_2;
extern  AD5315DA  Ad_Convert_3;

extern volatile INT16U * DA_Convert_Ctrl ;
extern volatile INT16U * DA_Convert_CS;


extern volatile INT16U * DA_Convert_RiseCount; //0x998		
extern volatile INT16U * DA_Convert_FallCount; //0x99c	
extern volatile INT16U * DA_Convert_HKeepCount; //0x9A0		
extern volatile INT16U * DA_Convert_LKeepCount; //0x9A4	
extern volatile INT16U * DA_Convert_HIncrument; //0x9A4	

extern volatile INT16U * DA_Convert_Ctrl_2;
extern volatile INT16U * DA_Convert_CS_2;

extern volatile INT16U * DA_Convert_AutoSign; //0x9A8		
extern volatile INT16U * DA_Convert_Vmax; //0x9Ac	
extern volatile INT16U * DA_Convert_Vs; //0x9B0		
extern volatile INT16U * DA_Convert_Cycle; //0x9B4	
extern volatile INT16U * DA_Convert_LIncrument; //0x9B4	

extern volatile INT16U * AOTF_HighCount; //0x9D0		
extern volatile INT16U * AOTF_LowCount; //0x9D4	
extern volatile INT16U * AOTF_Phase; //0x9D8		
extern volatile INT16U * AOTF_Enable; //0x9DC

extern volatile INT16U * Pockels_HighCount; //0x9E0		
extern volatile INT16U * Pockels_LowCount; //0x9E4	
extern volatile INT16U * Pockels_Phase; //0x9E8		
extern volatile INT16U * Pockels_Enable; //0x9EC

extern volatile INT16U * PWM_HighCount; //0x9F0		
extern volatile INT16U * PWM_LowCount; //0x9F4	
extern volatile INT16U * PWM_Phase; //0x9F8		
extern volatile INT16U * PWM_Enable; //0x9FC

extern volatile INT16U * PWM2_HighCount; //0xA00		
extern volatile INT16U * PWM2_LowCount; //0xA04	
extern volatile INT16U * PWM2_Phase; //0xA08		
extern volatile INT16U * PWM2_Enable; //0xA0C

extern volatile INT16U * DA_Convert_Ctrl_3 ;
extern volatile INT16U * DA_Convert_CS_3;

extern volatile INT16U * DA_Convert_HDividedNum; //0xA18		
extern volatile INT16U * DA_Convert_LDividedNum; //0xA1C	

extern  ENCODER Encoder_Axis1 ;
extern  ENCODER Encoder_Axis2 ;
extern  ENCODER Encoder_Axis3 ;
extern  ENCODER Encoder_Axis4 ;
extern  ENCODER Encoder_Axis5 ;
extern  ENCODER Encoder_Axis6 ;
extern  ENCODER Encoder_Axis7 ;
extern  ENCODER Encoder_Axis8 ;
extern  ENCODER Encoder_Axis9 ;
extern  ENCODER Encoder_Axis10 ;
extern  ENCODER Encoder_Axis11 ;
extern  ENCODER Encoder_Axis12 ;
extern  ENCODER Encoder_Axis13 ;
extern  ENCODER Encoder_Axis14 ;
extern  ENCODER Encoder_Axis15 ;
extern  ENCODER Encoder_Axis16 ;
extern  ENCODER Encoder_Axis17 ;
extern  ENCODER Encoder_Axis18 ;
extern  ENCODER Encoder_Axis19;
extern  ENCODER Encoder_Axis20 ;
extern  ENCODER Encoder_Axis21 ;
extern  ENCODER Encoder_Axis22 ;
extern  ENCODER Encoder_Axis23 ;

extern PMT Pmt_Counter1;
extern PMT Pmt_Counter2;

extern  SERVO Servo_Axis1;
extern  SERVO Servo_Axis2;
extern  SERVO Servo_Axis3;
extern  SERVO Servo_Axis4;
extern  SERVO Servo_Axis5;
extern  SERVO Servo_Axis6;
extern  SERVO Servo_Axis7;
extern  SERVO Servo_Axis8;
extern  SERVO Servo_Axis9;
extern  SERVO Servo_Axis10;
extern  SERVO Servo_Axis11;
extern  SERVO Servo_Axis12;
extern  SERVO Servo_Axis13;
extern  SERVO Servo_Axis14;
extern  SERVO Servo_Axis15;
extern  SERVO Servo_Axis16;
extern  SERVO Servo_Axis17;
extern  SERVO Servo_Axis18;
extern  SERVO Servo_Axis19;
extern  SERVO Servo_Axis20;
extern  SERVO Servo_Axis21;
extern  SERVO Servo_Axis22;
extern  SERVO Servo_Axis23;
extern GPIO_IRQSTATUS GPIO_IRQStatus;

extern void Read_Servo_Over_In(void);
extern void Read_Servo_Over1_In(void);
extern void Read_Servo_Over2_In(void);
extern void Read_Servo_Alarm1_In(void);
extern void Read_Servo_Alarm2_In(void);
extern void Read_Servo_Coin1_In(void);
extern void Read_Servo_Coin2_In(void);
extern void Read_Servo_HardLimit_Positive1_In(void);
extern void Read_Servo_HardLimit_Positive2_In(void);
extern void Read_Servo_HardLimit_Negative1_In(void);
extern void Read_Servo_HardLimit_Negative2_In(void);
extern void Read_Servo_Encoder_Reference1_In(void);
extern void Read_Servo_Encoder_Reference2_In(void);
extern void Read_AD_In(void);
extern void Read_GPIO_In1(void);
extern void Read_GPIO_In2(void);
extern void Read_GPIO_In3(void);
extern void Read_GPIO_In4(void);
extern void Read_Serial_Com_ReadSign(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis1(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis2(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis3(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis4(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis5(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis6(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis7(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis8(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis9(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis10(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis11(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis12(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis13(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis14(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis15(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis16(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis17(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis18(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis19(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis20(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis21(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis22(void);
extern void Read_AbsoluteEncoderValue_PSO_Axis23(void);

extern void Write_Servo_LPMEN(void);
extern void Write_Servo_On1_Out(void);
extern void Write_Servo_On2_Out(void);
extern void Write_Servo_Sign1_Out(void);
extern void Write_Servo_Sign2_Out(void);
extern void Write_Servo_Encoder_Clear1_Out(void);
extern void Write_Servo_Encoder_Clear2_Out(void);
extern void Write_GPIO_Out1(void);
extern void Write_GPIO_Out2(void);
extern void Write_GPIO_Out3(void);
extern void Write_GPIO_Out4(void);
extern void Write_LEDTest_Out1(void);
extern void Write_LEDTest_Out2(void);
extern void Write_ABSENCODER_SEN(void);
extern void Write_Servo_Com_FIFO_In_Clear(void);
extern void Write_Servo_Com_FIFO_Out_Clear(void);
extern void Write_LED_OUT_TIME1(void);
extern void Write_LED_OUT_TIME2(void);
extern void Write_LED_OUT_CONTROL(void);
extern void Write_LEDFlash_OUT(Uint16 LEDFlash_TRIGGER_OUT,Uint16 LEDFlash_DATA_OUT_1,Uint16 LEDFlash_DATA_OUT_2);
extern void Write_DA_CONVERT_CONTROL(Uint16 DA_Data,
												Uint16 DA_ADDR,
												Uint16 DA_CS);
extern void Write_DA_CONVERT_CONTROL_2(DACONVERT  *DA_WavePara);
extern void Write_DA_CONVERT_CONTROL_3(Uint16 DA_Data,
												Uint16 DA_ADDR,
												Uint16 DA_CS);

extern void Write_AOTF_CONTROL(Uint16 HighCount,Uint16 LowCount,Uint16 Phase,Uint16 Enable);
extern void Write_Pockels_CONTROL(Uint16 HighCount,Uint16 LowCount,Uint16 Phase,Uint16 Enable);
extern void Write_PWM1_CONTROL(Uint16 HighCount,Uint16 LowCount,Uint16 Phase,Uint16 Enable);
extern void Write_PWM2_CONTROL(Uint16 HighCount,Uint16 LowCount,Uint16 Phase,Uint16 Enable);

extern void Read_GPIO_IRQSTATUS_RAW(void);
extern void Read_GPIO0_IRQSTATUS_RAW_0(void);
extern void Read_GPIO0_IRQSTATUS_RAW_1(void);
extern void Read_GPIO1_IRQSTATUS_RAW_0(void);
extern void Read_GPIO1_IRQSTATUS_RAW_1(void);

extern void Read_GPIO_IRQSTATUS(void);
extern void Read_GPIO0_IRQSTATUS_0(void);
extern void Read_GPIO0_IRQSTATUS_1(void);
extern void Read_GPIO1_IRQSTATUS_0(void);
extern void Read_GPIO1_IRQSTATUS_1(void);

extern void CPLD_EncoderResetAllAxis(void);
extern void CPLD_EncoderResetAxis1(void);	//初始化编码器
extern void CPLD_EncoderResetAxis2(void);	//初始化编码器
extern void CPLD_EncoderResetAxis3(void);	//初始化编码器
extern void CPLD_EncoderResetAxis4(void);	//初始化编码器
extern void CPLD_EncoderResetAxis5(void);	//初始化编码器
extern void CPLD_EncoderResetAxis6(void);	//初始化编码器
extern void CPLD_EncoderResetAxis7(void);	//初始化编码器
extern void CPLD_EncoderResetAxis8(void);	//初始化编码器
extern void CPLD_EncoderResetAxis9(void);	//初始化编码器
extern void CPLD_EncoderResetAxis10(void);	//初始化编码器
extern void CPLD_EncoderResetAxis11(void);	//初始化编码器
extern void CPLD_EncoderResetAxis12(void);	//初始化编码器
extern void CPLD_EncoderResetAxis13(void);	//初始化编码器
extern void CPLD_EncoderResetAxis14(void);	//初始化编码器
extern void CPLD_EncoderResetAxis15(void);	//初始化编码器
extern void CPLD_EncoderResetAxis16(void);	//初始化编码器
extern void CPLD_EncoderResetAxis17(void);	//初始化编码器
extern void CPLD_EncoderResetAxis18(void);	//初始化编码器
extern void CPLD_EncoderResetAxis19(void);	//初始化编码器
extern void CPLD_EncoderResetAxis20(void);	//初始化编码器
extern void CPLD_EncoderResetAxis21(void);	//初始化编码器
extern void CPLD_EncoderResetAxis22(void);	//初始化编码器
extern void CPLD_EncoderResetAxis23(void);	//初始化编码器

//added 20170407 for PMT counter
extern void CPLD_ResetPMTAll(void);
extern void CPLD_ResetPMT1(void);
extern void CPLD_ResetPMT2(void);

extern void CPLD_EncoderJudge(void);		//判断编码器有无报警
extern void CPLD_ServoInit(void);
extern void CPLD_ServoOn(void);
extern void CPLD_ServoOn1(void);
extern void CPLD_ServoOn2(void);
extern void CPLD_ServoOff(void);

extern void CPLD_GPIO_INRead(void);
extern void CPLD_GPIO_OUTwrite(void);
extern void CPLD_GPIOinit(void);
extern void CPLD_GPIO_IRQStatusInit();

extern union MAINCOMMANDSIGN_REG GPIO0_IRQSTATUS_RAW_0_Register;
extern union MAINCOMMANDSIGN_REG GPIO0_IRQSTATUS_RAW_1_Register;
extern union MAINCOMMANDSIGN_REG GPIO1_IRQSTATUS_RAW_0_Register;
extern union MAINCOMMANDSIGN_REG GPIO1_IRQSTATUS_RAW_1_Register;

extern union MAINCOMMANDSIGN_REG GPIO0_IRQSTATUS_0_Register;
extern union MAINCOMMANDSIGN_REG GPIO0_IRQSTATUS_1_Register;
extern union MAINCOMMANDSIGN_REG GPIO1_IRQSTATUS_0_Register;
extern union MAINCOMMANDSIGN_REG GPIO1_IRQSTATUS_1_Register;

extern union MAINCOMMANDSIGN_REG ABSENCODER_SEN_Register;

extern union MAINCOMMANDSIGN_REG MainCommand_Register;
extern union MAINCOMMANDSIGN_REG MainCommand_Register_Clone_Optical;
extern union MAINCOMMANDSIGN_REG MainCommand_Register_PlateEmpty_Destination;
extern union MAINCOMMANDSIGN_REG MainCommand_Register_PlateWaste_Source;
extern union MAINCOMMANDSIGN_REG MainCommand_Register_PlateHandlling;

extern union MAINCOMMANDSIGN_REG Output_Register;
extern union MAINCOMMANDSIGN_REG Output_Register_Clone_Optical;
extern union MAINCOMMANDSIGN_REG Output_Register_PlateEmpty_Destination;
extern union MAINCOMMANDSIGN_REG Output_Register_PlateWaste_Source;
extern union MAINCOMMANDSIGN_REG Output_Register_PlateHandlling;

extern union MAINSTATUSSIGN_REG MainStatus_Register;

extern union MAINCOMMANDSIGN_REG MainCommand_ForTestSign;

extern Uint16 get_MACH_value(ENCODER *Encoder);	
extern Uint16 get_ABS_value(void);	//计算绝对坐标值
extern Uint16 pre_get_MACH_counter(ENCODER *Encoder); //预锁定基本计数值
extern void get_ABS_coordinate(void);
extern void get_PMT_counter(PMT *Pmt);

extern void nonlinear_mach_value(INT40AXIS Axis_MACHValue_In);
extern void nonlinear_Axis1_mach_value(Int32 Axis1_MACHValue);
extern void nonlinear_Axis2_mach_value(Int32 Axis2_MACHValue);
extern void nonlinear_Axis3_mach_value(Int32 Axis3_MACHValue);
extern void nonlinear_Axis4_mach_value(Int32 Axis4_MACHValue);
extern void nonlinear_Axis5_mach_value(Int32 Axis5_MACHValue);
extern void nonlinear_Axis6_mach_value(Int32 Axis6_MACHValue);
extern void nonlinear_Axis7_mach_value(Int32 Axis7_MACHValue);
extern void nonlinear_Axis8_mach_value(Int32 Axis8_MACHValue);
extern void nonlinear_Axis9_mach_value(Int32 Axis9_MACHValue);
extern void nonlinear_Axis10_mach_value(Int32 Axis10_MACHValue);
extern void nonlinear_Axis11_mach_value(Int32 Axis11_MACHValue);
extern void nonlinear_Axis12_mach_value(Int32 Axis12_MACHValue);
extern void nonlinear_Axis13_mach_value(Int32 Axis13_MACHValue);
extern void nonlinear_Axis14_mach_value(Int32 Axis14_MACHValue);
extern void nonlinear_Axis15_mach_value(Int32 Axis15_MACHValue);
extern void nonlinear_Axis16_mach_value(Int32 Axis16_MACHValue);
extern void nonlinear_Axis17_mach_value(Int32 Axis17_MACHValue);
extern void nonlinear_Axis18_mach_value(Int32 Axis18_MACHValue);
extern void nonlinear_Axis19_mach_value(Int32 Axis9_MACHValue);
extern void nonlinear_Axis20_mach_value(Int32 Axis20_MACHValue);
extern void nonlinear_Axis21_mach_value(Int32 Axis21_MACHValue);
extern void nonlinear_Axis22_mach_value(Int32 Axis22_MACHValue);
extern void nonlinear_Axis23_mach_value(Int32 Axis23_MACHValue);
extern void nonlinear_Axis24_mach_value(Int32 Axis24_MACHValue);
extern void nonlinear_Axis25_mach_value(Int32 Axis25_MACHValue);


extern INT40AXIS nonlinear_pulse_out(INT40AXIS Axis_MACHValue_Out);
extern Int32 nonlinear_Axis1_pulse_out(Int32 Axis1_MACHValue);
extern Int32 nonlinear_Axis2_pulse_out(Int32 Axis2_MACHValue);
extern Int32 nonlinear_Axis3_pulse_out(Int32 Axis3_MACHValue);
extern Int32 nonlinear_Axis4_pulse_out(Int32 Axis4_MACHValue);
extern Int32 nonlinear_Axis5_pulse_out(Int32 Axis5_MACHValue);
extern Int32 nonlinear_Axis6_pulse_out(Int32 Axis6_MACHValue);
extern Int32 nonlinear_Axis7_pulse_out(Int32 Axis7_MACHValue);
extern Int32 nonlinear_Axis8_pulse_out(Int32 Axis8_MACHValue);
extern Int32 nonlinear_Axis9_pulse_out(Int32 Axis9_MACHValue);
extern Int32 nonlinear_Axis10_pulse_out(Int32 Axis10_MACHValue);
extern Int32 nonlinear_Axis11_pulse_out(Int32 Axis11_MACHValue);
extern Int32 nonlinear_Axis12_pulse_out(Int32 Axis12_MACHValue);
extern Int32 nonlinear_Axis13_pulse_out(Int32 Axis13_MACHValue);
extern Int32 nonlinear_Axis14_pulse_out(Int32 Axis14_MACHValue);
extern Int32 nonlinear_Axis15_pulse_out(Int32 Axis15_MACHValue);
extern Int32 nonlinear_Axis16_pulse_out(Int32 Axis16_MACHValue);
extern Int32 nonlinear_Axis17_pulse_out(Int32 Axis17_MACHValue);
extern Int32 nonlinear_Axis18_pulse_out(Int32 Axis18_MACHValue);
extern Int32 nonlinear_Axis19_pulse_out(Int32 Axis19_MACHValue);
extern Int32 nonlinear_Axis20_pulse_out(Int32 Axis20_MACHValue);
extern Int32 nonlinear_Axis21_pulse_out(Int32 Axis21_MACHValue);
extern Int32 nonlinear_Axis22_pulse_out(Int32 Axis22_MACHValue);
extern Int32 nonlinear_Axis23_pulse_out(Int32 Axis23_MACHValue);
extern Int32 nonlinear_Axis24_pulse_out(Int32 Axis24_MACHValue);
extern Int32 nonlinear_Axis25_pulse_out(Int32 Axis25_MACHValue);

extern void get_ABS_coordinate_CameraScan(void);
extern void get_ABS_coordinate_MicroEScan(void);
extern void get_ABS_coordinate_LensPosition(void);
extern void get_ABS_coordinate_LensMotionCompensation(void);

extern void CheckMACH_PositionValueLimit(void);
extern void CheckMACH_PositionValueLimit_PSO(void);


#endif 
